/**
* PROJECT 정보 I/F TABLE -> BIX TABLE TRANSFER
*/
PROCEDURE P_IF_SC_PL_SC_TRSF (
	IN VER NVARCHAR(20),
	OUT O_RESULT TABLE (
		RESULT_CODE NVARCHAR(30)
		, VER NVARCHAR(20)
		, SQL_ERROR_CODE NVARCHAR(30)
		, SQL_ERROR_MESSAGE NVARCHAR(500)
	)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN
USING SQLSCRIPT_PRINT AS LIB;
	
	DECLARE V_USER_NAME NVARCHAR(10) = 'IF_SYS';
	DECLARE V_START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE V_IF_TABLE NVARCHAR(50) DEFAULT 'SC_IF_PL';
	DECLARE V_INSERT_CNT INTEGER = 0;
	DECLARE V_DUMMY INTEGER;

	/* SQL ERROR 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;

		:O_RESULT.INSERT(('NG', :VER, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500)));

		INSERT INTO COMMON_INTERFACE_LOG
		(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
		VALUES
		(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'SC_IF_PL', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, NULL, NULL, false, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500));	

	END;

	/***********************************************
	VALIDATION
	***********************************************/

	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-STEP [PROCEDURE START]'));

	-- [STEP-1] I/F 테이블 확인 (해당 버전 데이터가 IF 테이블에 존재하는지 체크)
	
	SELECT 1
	INTO V_DUMMY
	FROM SC_IF_PL
	WHERE FLAG IS NULL
	LIMIT 1
	;
		
	-- [STEP-2] IF DATA 등록
	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'SC_PL_WIDEVIEW';

	MERGE INTO SC_PL_WIDEVIEW T
	USING (
		SELECT
			:VER,
			YEAR,
			LPAD(MONTH,2,'0') AS MONTH,
			PRJ_NO,
			-- 'SC-PRJ_NO-TBD-' || LPAD(TO_VARCHAR(ROUND(RAND()*1000,0)),4,'0') AS PRJ_NO, -- TBD
			ROW_NUMBER() OVER (PARTITION BY PRJ_NO) AS SEQ,
			'S' AS SRC_TYPE,
			IFNULL(SALE_M1_AMT,0) AS SALE_M1_AMT,
			IFNULL(SALE_M2_AMT,0) AS SALE_M2_AMT,
			IFNULL(SALE_M3_AMT,0) AS SALE_M3_AMT,
			IFNULL(SALE_M4_AMT,0) AS SALE_M4_AMT,
			IFNULL(SALE_M5_AMT,0) AS SALE_M5_AMT,
			IFNULL(SALE_M6_AMT,0) AS SALE_M6_AMT,
			IFNULL(SALE_M7_AMT,0) AS SALE_M7_AMT,
			IFNULL(SALE_M8_AMT,0) AS SALE_M8_AMT,
			IFNULL(SALE_M9_AMT,0) AS SALE_M9_AMT,
			IFNULL(SALE_M10_AMT,0) AS SALE_M10_AMT,
			IFNULL(SALE_M11_AMT,0) AS SALE_M11_AMT,
			IFNULL(SALE_M12_AMT,0) AS SALE_M12_AMT,
			IFNULL(PRJ_PRFM_M1_AMT,0) AS PRJ_PRFM_M1_AMT,
			IFNULL(PRJ_PRFM_M2_AMT,0) AS PRJ_PRFM_M2_AMT,
			IFNULL(PRJ_PRFM_M3_AMT,0) AS PRJ_PRFM_M3_AMT,
			IFNULL(PRJ_PRFM_M4_AMT,0) AS PRJ_PRFM_M4_AMT,
			IFNULL(PRJ_PRFM_M5_AMT,0) AS PRJ_PRFM_M5_AMT,
			IFNULL(PRJ_PRFM_M6_AMT,0) AS PRJ_PRFM_M6_AMT,
			IFNULL(PRJ_PRFM_M7_AMT,0) AS PRJ_PRFM_M7_AMT,
			IFNULL(PRJ_PRFM_M8_AMT,0) AS PRJ_PRFM_M8_AMT,
			IFNULL(PRJ_PRFM_M9_AMT,0) AS PRJ_PRFM_M9_AMT,
			IFNULL(PRJ_PRFM_M10_AMT,0) AS PRJ_PRFM_M10_AMT,
			IFNULL(PRJ_PRFM_M11_AMT,0) AS PRJ_PRFM_M11_AMT,
			IFNULL(PRJ_PRFM_M12_AMT,0) AS PRJ_PRFM_M12_AMT,
			IFNULL(MARGIN_M1_AMT,0) AS MARGIN_M1_AMT,
			IFNULL(MARGIN_M2_AMT,0) AS MARGIN_M2_AMT,
			IFNULL(MARGIN_M3_AMT,0) AS MARGIN_M3_AMT,
			IFNULL(MARGIN_M4_AMT,0) AS MARGIN_M4_AMT,
			IFNULL(MARGIN_M5_AMT,0) AS MARGIN_M5_AMT,
			IFNULL(MARGIN_M6_AMT,0) AS MARGIN_M6_AMT,
			IFNULL(MARGIN_M7_AMT,0) AS MARGIN_M7_AMT,
			IFNULL(MARGIN_M8_AMT,0) AS MARGIN_M8_AMT,
			IFNULL(MARGIN_M9_AMT,0) AS MARGIN_M9_AMT,
			IFNULL(MARGIN_M10_AMT,0) AS MARGIN_M10_AMT,
			IFNULL(MARGIN_M11_AMT,0) AS MARGIN_M11_AMT,
			IFNULL(MARGIN_M12_AMT,0) AS MARGIN_M12_AMT
		FROM SC_IF_PL
		WHERE FLAG IS NULL
	) AS S
	ON (
		1=1
		AND T.YEAR = S.YEAR
		AND T.MONTH = S.MONTH
		AND T.PRJ_NO = S.PRJ_NO
		AND T.SRC_TYPE = 'S'
		AND T.VER = :VER
	)
	WHEN MATCHED THEN
		UPDATE SET
			T.MODIFIEDAT = :V_START_TIME,
			T.MODIFIEDBY = :V_USER_NAME,
			T.SALE_M1_AMT = S.SALE_M1_AMT,
			T.SALE_M2_AMT = S.SALE_M2_AMT,
			T.SALE_M3_AMT = S.SALE_M3_AMT,
			T.SALE_M4_AMT = S.SALE_M4_AMT,
			T.SALE_M5_AMT = S.SALE_M5_AMT,
			T.SALE_M6_AMT = S.SALE_M6_AMT,
			T.SALE_M7_AMT = S.SALE_M7_AMT,
			T.SALE_M8_AMT = S.SALE_M8_AMT,
			T.SALE_M9_AMT = S.SALE_M9_AMT,
			T.SALE_M10_AMT = S.SALE_M10_AMT,
			T.SALE_M11_AMT = S.SALE_M11_AMT,
			T.SALE_M12_AMT = S.SALE_M12_AMT,
			T.PRJ_PRFM_M1_AMT = S.PRJ_PRFM_M1_AMT,
			T.PRJ_PRFM_M2_AMT = S.PRJ_PRFM_M2_AMT,
			T.PRJ_PRFM_M3_AMT = S.PRJ_PRFM_M3_AMT,
			T.PRJ_PRFM_M4_AMT = S.PRJ_PRFM_M4_AMT,
			T.PRJ_PRFM_M5_AMT = S.PRJ_PRFM_M5_AMT,
			T.PRJ_PRFM_M6_AMT = S.PRJ_PRFM_M6_AMT,
			T.PRJ_PRFM_M7_AMT = S.PRJ_PRFM_M7_AMT,
			T.PRJ_PRFM_M8_AMT = S.PRJ_PRFM_M8_AMT,
			T.PRJ_PRFM_M9_AMT = S.PRJ_PRFM_M9_AMT,
			T.PRJ_PRFM_M10_AMT = S.PRJ_PRFM_M10_AMT,
			T.PRJ_PRFM_M11_AMT = S.PRJ_PRFM_M11_AMT,
			T.PRJ_PRFM_M12_AMT = S.PRJ_PRFM_M12_AMT,
			T.MARGIN_M1_AMT = S.MARGIN_M1_AMT,
			T.MARGIN_M2_AMT = S.MARGIN_M2_AMT,
			T.MARGIN_M3_AMT = S.MARGIN_M3_AMT,
			T.MARGIN_M4_AMT = S.MARGIN_M4_AMT,
			T.MARGIN_M5_AMT = S.MARGIN_M5_AMT,
			T.MARGIN_M6_AMT = S.MARGIN_M6_AMT,
			T.MARGIN_M7_AMT = S.MARGIN_M7_AMT,
			T.MARGIN_M8_AMT = S.MARGIN_M8_AMT,
			T.MARGIN_M9_AMT = S.MARGIN_M9_AMT,
			T.MARGIN_M10_AMT = S.MARGIN_M10_AMT,
			T.MARGIN_M11_AMT = S.MARGIN_M11_AMT,
			T.MARGIN_M12_AMT = S.MARGIN_M12_AMT
	WHEN NOT MATCHED THEN    	
		INSERT (
			CREATEDAT,
			CREATEDBY,
			MODIFIEDAT,
			MODIFIEDBY,
			VER,
			YEAR,
			MONTH,
			PRJ_NO,
			SEQ,
			SRC_TYPE,
			SALE_M1_AMT,
			SALE_M2_AMT,
			SALE_M3_AMT,
			SALE_M4_AMT,
			SALE_M5_AMT,
			SALE_M6_AMT,
			SALE_M7_AMT,
			SALE_M8_AMT,
			SALE_M9_AMT,
			SALE_M10_AMT,
			SALE_M11_AMT,
			SALE_M12_AMT,
			PRJ_PRFM_M1_AMT,
			PRJ_PRFM_M2_AMT,
			PRJ_PRFM_M3_AMT,
			PRJ_PRFM_M4_AMT,
			PRJ_PRFM_M5_AMT,
			PRJ_PRFM_M6_AMT,
			PRJ_PRFM_M7_AMT,
			PRJ_PRFM_M8_AMT,
			PRJ_PRFM_M9_AMT,
			PRJ_PRFM_M10_AMT,
			PRJ_PRFM_M11_AMT,
			PRJ_PRFM_M12_AMT,
			MARGIN_M1_AMT,
			MARGIN_M2_AMT,
			MARGIN_M3_AMT,
			MARGIN_M4_AMT,
			MARGIN_M5_AMT,
			MARGIN_M6_AMT,
			MARGIN_M7_AMT,
			MARGIN_M8_AMT,
			MARGIN_M9_AMT,
			MARGIN_M10_AMT,
			MARGIN_M11_AMT,
			MARGIN_M12_AMT
		)
		VALUES (
			:V_START_TIME,
			:V_USER_NAME,
			:V_START_TIME,
			:V_USER_NAME,
			:VER,
			S.YEAR,
			LPAD(S.MONTH, 2, '0'),
			S.PRJ_NO,
			S.SEQ,
			'S',
			S.SALE_M1_AMT,
			S.SALE_M2_AMT,
			S.SALE_M3_AMT,
			S.SALE_M4_AMT,
			S.SALE_M5_AMT,
			S.SALE_M6_AMT,
			S.SALE_M7_AMT,
			S.SALE_M8_AMT,
			S.SALE_M9_AMT,
			S.SALE_M10_AMT,
			S.SALE_M11_AMT,
			S.SALE_M12_AMT,
			S.PRJ_PRFM_M1_AMT,
			S.PRJ_PRFM_M2_AMT,
			S.PRJ_PRFM_M3_AMT,
			S.PRJ_PRFM_M4_AMT,
			S.PRJ_PRFM_M5_AMT,
			S.PRJ_PRFM_M6_AMT,
			S.PRJ_PRFM_M7_AMT,
			S.PRJ_PRFM_M8_AMT,
			S.PRJ_PRFM_M9_AMT,
			S.PRJ_PRFM_M10_AMT,
			S.PRJ_PRFM_M11_AMT,
			S.PRJ_PRFM_M12_AMT,
			S.MARGIN_M1_AMT,
			S.MARGIN_M2_AMT,
			S.MARGIN_M3_AMT,
			S.MARGIN_M4_AMT,
			S.MARGIN_M5_AMT,
			S.MARGIN_M6_AMT,
			S.MARGIN_M7_AMT,
			S.MARGIN_M8_AMT,
			S.MARGIN_M9_AMT,
			S.MARGIN_M10_AMT,
			S.MARGIN_M11_AMT,
			S.MARGIN_M12_AMT
		);

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'SC_IF_PL', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);

	UPDATE SC_IF_PL
	SET FLAG = 'S'
	WHERE FLAG IS NULL
	AND VER = :VER;

	-- [STEP-3] I/F DATA 등록 처리결과 등록
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-PROCEDURE SUCCESS... COUNT => ['||:V_INSERT_CNT||']'));	

END;