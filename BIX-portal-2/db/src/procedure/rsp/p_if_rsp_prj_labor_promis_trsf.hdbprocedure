/**
* PROJECT 정보 I/F TABLE -> BIX TABLE TRANSFER
*
* > O_RESULT : 로그 저장
*/
PROCEDURE P_IF_RSP_PRJ_LABOR_PROMIS_TRSF (
	IN VER NVARCHAR(20),
	OUT O_RESULT TABLE (
		RESULT_CODE NVARCHAR(30)
		, VER NVARCHAR(20)
		, SQL_ERROR_CODE NVARCHAR(30)
		, SQL_ERROR_MESSAGE NVARCHAR(500)
	)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN
USING SQLSCRIPT_PRINT AS LIB;

	DECLARE V_USER_NAME NVARCHAR(10) = 'IF_SYS';
	DECLARE V_START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE V_IF_TABLE NVARCHAR(50) DEFAULT 'RSP_IF_PRJ_LABOR';
	DECLARE V_INSERT_CNT INTEGER = 0;
	DECLARE V_DUMMY INTEGER;

	/* SQL ERROR 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;

		:O_RESULT.INSERT(('NG', :VER, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500)));

		INSERT INTO COMMON_INTERFACE_LOG
		(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
		VALUES
		(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'RSP_IF_PRJ_LABOR', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, NULL, NULL, false, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500));	

	END;

	/***********************************************
	VALIDATION
	***********************************************/

	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-STEP [PROCEDURE START]'));

	-- [STEP-1] I/F 테이블 확인 (해당 버전 데이터가 IF 테이블에 존재하는지 체크)
	
	SELECT 1
	INTO V_DUMMY
	FROM RSP_IF_PRJ_LABOR
	WHERE VER = :VER
	-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
	LIMIT 1
	;
		
	-- [STEP-2] IF DATA 등록

	V_INSERT_DATA =
	SELECT PRJ_LABOR.* FROM 
	(
		SELECT 
			VER, YEAR, SUBSTRING(YEAR_MONTH,5,2) AS MONTH, CCORG_CD, PRJ_NO,
			-- IF 데이터의 MONTH 값 기준 금액 컬럼 PIVOT / 01~09 월 한자리 수로 들어올 경우 방지
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '01' THEN BILL_AMT ELSE 0 END) AS BILL_M1_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '02' THEN BILL_AMT ELSE 0 END) AS BILL_M2_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '03' THEN BILL_AMT ELSE 0 END) AS BILL_M3_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '04' THEN BILL_AMT ELSE 0 END) AS BILL_M4_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '05' THEN BILL_AMT ELSE 0 END) AS BILL_M5_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '06' THEN BILL_AMT ELSE 0 END) AS BILL_M6_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '07' THEN BILL_AMT ELSE 0 END) AS BILL_M7_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '08' THEN BILL_AMT ELSE 0 END) AS BILL_M8_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '09' THEN BILL_AMT ELSE 0 END) AS BILL_M9_AMT,
			MAX(CASE WHEN MONTH = '10' THEN BILL_AMT ELSE 0 END) AS BILL_M10_AMT,
			MAX(CASE WHEN MONTH = '11' THEN BILL_AMT ELSE 0 END) AS BILL_M11_AMT,
			MAX(CASE WHEN MONTH = '12' THEN BILL_AMT ELSE 0 END) AS BILL_M12_AMT,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '01' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M1,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '02' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M2,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '03' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M3,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '04' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M4,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '05' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M5,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '06' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M6,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '07' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M7,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '08' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M8,
			MAX(CASE WHEN LPAD(MONTH,2,'0') = '09' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M9,
			MAX(CASE WHEN MONTH = '10' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M10,
			MAX(CASE WHEN MONTH = '11' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M11,
			MAX(CASE WHEN MONTH = '12' THEN INDIRECT_COST ELSE 0 END) AS INDIRECT_COST_M12
		FROM RSP_IF_PRJ_LABOR
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		GROUP BY VER, YEAR, YEAR_MONTH, CCORG_CD, PRJ_NO
	) AS PRJ_LABOR
	LEFT JOIN COMMON_PROJECT AS PRJ
	ON PRJ_LABOR.PRJ_NO = PRJ.PRJ_NO
	WHERE UPPER(SUBSTRING(PRJ.PRJ_NO,1,2)) <> 'IV'
	OR 
	(PRJ.PRJ_TP_CD = '62'
	OR PRJ.PRJ_TP_CD = '100077') -- 임시 common_project 인터페이스 후 제거
	;
	
	-- RSP_ORG_B_LABOR
	
	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'RSP_ORG_B_LABOR';

	INSERT INTO RSP_ORG_B_LABOR (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		BILL_M1_AMT,
		BILL_M2_AMT,
		BILL_M3_AMT,
		BILL_M4_AMT,
		BILL_M5_AMT,
		BILL_M6_AMT,
		BILL_M7_AMT,
		BILL_M8_AMT,
		BILL_M9_AMT,
		BILL_M10_AMT,
		BILL_M11_AMT,
		BILL_M12_AMT,
		INDIRECT_COST_M1,
		INDIRECT_COST_M2,
		INDIRECT_COST_M3,
		INDIRECT_COST_M4,
		INDIRECT_COST_M5,
		INDIRECT_COST_M6,
		INDIRECT_COST_M7,
		INDIRECT_COST_M8,
		INDIRECT_COST_M9,
		INDIRECT_COST_M10,
		INDIRECT_COST_M11,
		INDIRECT_COST_M12
	)
	WITH IF_DATA AS (
		SELECT VER, YEAR, MONTH, CCORG_CD,
			SUM(BILL_M1_AMT) AS BILL_M1_AMT,
			SUM(BILL_M2_AMT) AS BILL_M2_AMT,
			SUM(BILL_M3_AMT) AS BILL_M3_AMT,
			SUM(BILL_M4_AMT) AS BILL_M4_AMT,
			SUM(BILL_M5_AMT) AS BILL_M5_AMT,
			SUM(BILL_M6_AMT) AS BILL_M6_AMT,
			SUM(BILL_M7_AMT) AS BILL_M7_AMT,
			SUM(BILL_M8_AMT) AS BILL_M8_AMT,
			SUM(BILL_M9_AMT) AS BILL_M9_AMT,
			SUM(BILL_M10_AMT) AS BILL_M10_AMT,
			SUM(BILL_M11_AMT) AS BILL_M11_AMT,
			SUM(BILL_M12_AMT) AS BILL_M12_AMT,
			SUM(INDIRECT_COST_M1) AS INDIRECT_COST_M1,
			SUM(INDIRECT_COST_M2) AS INDIRECT_COST_M2,
			SUM(INDIRECT_COST_M3) AS INDIRECT_COST_M3,
			SUM(INDIRECT_COST_M4) AS INDIRECT_COST_M4,
			SUM(INDIRECT_COST_M5) AS INDIRECT_COST_M5,
			SUM(INDIRECT_COST_M6) AS INDIRECT_COST_M6,
			SUM(INDIRECT_COST_M7) AS INDIRECT_COST_M7,
			SUM(INDIRECT_COST_M8) AS INDIRECT_COST_M8,
			SUM(INDIRECT_COST_M9) AS INDIRECT_COST_M9,
			SUM(INDIRECT_COST_M10) AS INDIRECT_COST_M10,
			SUM(INDIRECT_COST_M11) AS INDIRECT_COST_M11,
			SUM(INDIRECT_COST_M12) AS INDIRECT_COST_M12
		FROM :V_INSERT_DATA
		GROUP BY VER, YEAR, MONTH, CCORG_CD
	)
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		BILL_M1_AMT,
		BILL_M2_AMT,
		BILL_M3_AMT,
		BILL_M4_AMT,
		BILL_M5_AMT,
		BILL_M6_AMT,
		BILL_M7_AMT,
		BILL_M8_AMT,
		BILL_M9_AMT,
		BILL_M10_AMT,
		BILL_M11_AMT,
		BILL_M12_AMT,
		INDIRECT_COST_M1,
		INDIRECT_COST_M2,
		INDIRECT_COST_M3,
		INDIRECT_COST_M4,
		INDIRECT_COST_M5,
		INDIRECT_COST_M6,
		INDIRECT_COST_M7,
		INDIRECT_COST_M8,
		INDIRECT_COST_M9,
		INDIRECT_COST_M10,
		INDIRECT_COST_M11,
		INDIRECT_COST_M12
	FROM IF_DATA;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'RSP_IF_PRJ_LABOR', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);

	-- [RSP_PRJ_LABOR 두번째 테이블 인터페이스 이관]
	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'RSP_PRJ_LABOR';
		
	INSERT INTO RSP_PRJ_LABOR (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		PRJ_NO,
		CCORG_CD,
		BILL_M1_AMT,
		BILL_M2_AMT,
		BILL_M3_AMT,
		BILL_M4_AMT,
		BILL_M5_AMT,
		BILL_M6_AMT,
		BILL_M7_AMT,
		BILL_M8_AMT,
		BILL_M9_AMT,
		BILL_M10_AMT,
		BILL_M11_AMT,
		BILL_M12_AMT,
		INDIRECT_COST_M1,
		INDIRECT_COST_M2,
		INDIRECT_COST_M3,
		INDIRECT_COST_M4,
		INDIRECT_COST_M5,
		INDIRECT_COST_M6,
		INDIRECT_COST_M7,
		INDIRECT_COST_M8,
		INDIRECT_COST_M9,
		INDIRECT_COST_M10,
		INDIRECT_COST_M11,
		INDIRECT_COST_M12
	)
	WITH IF_DATA AS (
		SELECT * FROM :V_INSERT_DATA )
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		LPAD(MONTH,2,'0') AS MONTH,
		PRJ_NO,
		CCORG_CD,
		BILL_M1_AMT,
		BILL_M2_AMT,
		BILL_M3_AMT,
		BILL_M4_AMT,
		BILL_M5_AMT,
		BILL_M6_AMT,
		BILL_M7_AMT,
		BILL_M8_AMT,
		BILL_M9_AMT,
		BILL_M10_AMT,
		BILL_M11_AMT,
		BILL_M12_AMT,
		INDIRECT_COST_M1,
		INDIRECT_COST_M2,
		INDIRECT_COST_M3,
		INDIRECT_COST_M4,
		INDIRECT_COST_M5,
		INDIRECT_COST_M6,
		INDIRECT_COST_M7,
		INDIRECT_COST_M8,
		INDIRECT_COST_M9,
		INDIRECT_COST_M10,
		INDIRECT_COST_M11,
		INDIRECT_COST_M12
	FROM IF_DATA;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'RSP_IF_PRJ_LABOR', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);

	-- SGA WIDEVIEW - LABOR 항목 추가
		
	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'SGA_WIDEVIEW';
	
	MERGE INTO SGA_WIDEVIEW T
	USING (
		SELECT
			B.VER,
			B.YEAR,
			TOTAL.MONTH,
			B.CCORG_CD,
			TOTAL_M1_AMT - (BILL_M1_AMT - INDIRECT_COST_M1) AS LABOR_M1_AMT,
			TOTAL_M2_AMT - (BILL_M2_AMT - INDIRECT_COST_M2) AS LABOR_M2_AMT,
			TOTAL_M3_AMT - (BILL_M3_AMT - INDIRECT_COST_M3) AS LABOR_M3_AMT,
			TOTAL_M4_AMT - (BILL_M4_AMT - INDIRECT_COST_M4) AS LABOR_M4_AMT,
			TOTAL_M5_AMT - (BILL_M5_AMT - INDIRECT_COST_M5) AS LABOR_M5_AMT,
			TOTAL_M6_AMT - (BILL_M6_AMT - INDIRECT_COST_M6) AS LABOR_M6_AMT,
			TOTAL_M7_AMT - (BILL_M7_AMT - INDIRECT_COST_M7) AS LABOR_M7_AMT,
			TOTAL_M8_AMT - (BILL_M8_AMT - INDIRECT_COST_M8) AS LABOR_M8_AMT,
			TOTAL_M9_AMT - (BILL_M9_AMT - INDIRECT_COST_M9) AS LABOR_M9_AMT,
			TOTAL_M10_AMT - (BILL_M10_AMT - INDIRECT_COST_M10) AS LABOR_M10_AMT,
			TOTAL_M11_AMT - (BILL_M11_AMT - INDIRECT_COST_M11) AS LABOR_M11_AMT,
			TOTAL_M12_AMT - (BILL_M12_AMT - INDIRECT_COST_M12) AS LABOR_M12_AMT
		FROM RSP_ORG_TOTAL_LABOR AS TOTAL
		INNER JOIN RSP_ORG_B_LABOR AS B
		ON TOTAL.YEAR = B.YEAR
		AND (
			TOTAL.MONTH = B.MONTH
			OR (TOTAL.MONTH = '13' AND B.MONTH = '12')
		)
		AND TOTAL.CCORG_CD = B.CCORG_CD
		AND TOTAL.VER = B.VER
	) AS S
	ON (
		1=1
		AND T.YEAR = S.YEAR
		AND T.MONTH = S.MONTH
		AND T.CCORG_CD = S.CCORG_CD
		AND T.VER = S.VER
	)
	WHEN MATCHED THEN
		UPDATE SET
			T.MODIFIEDAT = :V_START_TIME,
			T.MODIFIEDBY = :V_USER_NAME,
			T.LABOR_M1_AMT = IFNULL(S.LABOR_M1_AMT,0),
			T.LABOR_M2_AMT = IFNULL(S.LABOR_M2_AMT,0),
			T.LABOR_M3_AMT = IFNULL(S.LABOR_M3_AMT,0),
			T.LABOR_M4_AMT = IFNULL(S.LABOR_M4_AMT,0),
			T.LABOR_M5_AMT = IFNULL(S.LABOR_M5_AMT,0),
			T.LABOR_M6_AMT = IFNULL(S.LABOR_M6_AMT,0),
			T.LABOR_M7_AMT = IFNULL(S.LABOR_M7_AMT,0),
			T.LABOR_M8_AMT = IFNULL(S.LABOR_M8_AMT,0),
			T.LABOR_M9_AMT = IFNULL(S.LABOR_M9_AMT,0),
			T.LABOR_M10_AMT = IFNULL(S.LABOR_M10_AMT,0),
			T.LABOR_M11_AMT = IFNULL(S.LABOR_M11_AMT,0),
			T.LABOR_M12_AMT = IFNULL(S.LABOR_M12_AMT,0)
	WHEN NOT MATCHED THEN    	
		INSERT (
			CREATEDAT,
			CREATEDBY,
			MODIFIEDAT,
			MODIFIEDBY,
			VER,
			YEAR,
			MONTH,
			CCORG_CD,
			LABOR_M1_AMT,
			LABOR_M2_AMT,
			LABOR_M3_AMT,
			LABOR_M4_AMT,
			LABOR_M5_AMT,
			LABOR_M6_AMT,
			LABOR_M7_AMT,
			LABOR_M8_AMT,
			LABOR_M9_AMT,
			LABOR_M10_AMT,
			LABOR_M11_AMT,
			LABOR_M12_AMT,
			SHARED_EXP_YN
		)
		VALUES (
			:V_START_TIME,
			:V_USER_NAME,
			:V_START_TIME,
			:V_USER_NAME,
			S.VER,
			S.YEAR,
			S.MONTH,
			S.CCORG_CD,
			IFNULL(S.LABOR_M1_AMT,0),
			IFNULL(S.LABOR_M2_AMT,0),
			IFNULL(S.LABOR_M3_AMT,0),
			IFNULL(S.LABOR_M4_AMT,0),
			IFNULL(S.LABOR_M5_AMT,0),
			IFNULL(S.LABOR_M6_AMT,0),
			IFNULL(S.LABOR_M7_AMT,0),
			IFNULL(S.LABOR_M8_AMT,0),
			IFNULL(S.LABOR_M9_AMT,0),
			IFNULL(S.LABOR_M10_AMT,0),
			IFNULL(S.LABOR_M11_AMT,0),
			IFNULL(S.LABOR_M12_AMT,0),
			false
		);

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'RSP_IF_PRJ_LABOR', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);

	UPDATE RSP_IF_PRJ_LABOR
	SET FLAG = 'S'
	WHERE FLAG IS NULL
	AND VER = :VER;

	-- [STEP-3] I/F DATA 등록 처리결과 등록
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-PROCEDURE SUCCESS... COUNT => ['||:V_INSERT_CNT||']'));

END;