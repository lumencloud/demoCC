/**
* OI PROJECT 정보 I/F TABLE -> BIX TABLE TRANSFER
*
* > O_RESULT : 로그 저장
*/
PROCEDURE P_IF_OI_ITO_PROMIS_TRSF (
    IN VER NVARCHAR(20),
	OUT O_RESULT TABLE (
		RESULT_CODE NVARCHAR(30)
		, VER NVARCHAR(20)
		, SQL_ERROR_CODE NVARCHAR(30)
		, SQL_ERROR_MESSAGE NVARCHAR(500)
	)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN
USING SQLSCRIPT_PRINT AS LIB;
	
	DECLARE V_USER_NAME NVARCHAR(10) = 'IF_SYS';
	DECLARE V_START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE V_IF_TABLE NVARCHAR(50) DEFAULT 'OI_IF_ITO';
	DECLARE V_INSERT_CNT INTEGER = 0;
	DECLARE V_DUMMY INTEGER;

	/* SQL ERROR 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;

		:O_RESULT.INSERT(('NG', :VER, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500)));

		INSERT INTO COMMON_INTERFACE_LOG
		(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
		VALUES
		(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'OI_IF_ITO', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, NULL, NULL, false, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500));	

	END;

	/***********************************************
	VALIDATION
	***********************************************/

	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-STEP [PROCEDURE START]'));

	-- [STEP-1] I/F 테이블 확인 (해당 버전 데이터가 IF 테이블에 존재하는지 체크)
	
	SELECT 1
	INTO V_DUMMY
	FROM OI_IF_ITO
	WHERE VER = :VER
	-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
	LIMIT 1
	;
		
	-- [STEP-2] IF DATA 등록
	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'OI_ITO';

	-- OI_ITO
	INSERT INTO OI_ITO (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		PRJ_TP_NM, 
		ITO_M1_AMT,
		ITO_M2_AMT,
		ITO_M3_AMT,
		ITO_M4_AMT,
		ITO_M5_AMT,
		ITO_M6_AMT,
		ITO_M7_AMT,
		ITO_M8_AMT,
		ITO_M9_AMT,
		ITO_M10_AMT,
		ITO_M11_AMT,
		ITO_M12_AMT
	)
	WITH IF_DATA AS (
		SELECT
			OI.VER,
			OI.YEAR,
			OI.MONTH,
			PRJ.SALE_CCORG_CD AS CCORG_CD,
			CASE MAP.ITO_TYPE
				WHEN 'ATS' THEN 'ATS'
				WHEN 'AGS' THEN 'AGS'
				ELSE 'K-BP'
			END AS ITO_TYPE,
			SUBSTRING(TP.VALUE,1,2) AS PRJ_TP_NM,	-- SI/OS 만 추출
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '01' THEN OI_ITO_AMT
			END AS ITO_M1_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '02' THEN OI_ITO_AMT
			END AS ITO_M2_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '03' THEN OI_ITO_AMT
			END AS ITO_M3_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '04' THEN OI_ITO_AMT
			END AS ITO_M4_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '05' THEN OI_ITO_AMT
			END AS ITO_M5_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '06' THEN OI_ITO_AMT
			END AS ITO_M6_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '07' THEN OI_ITO_AMT
			END AS ITO_M7_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '08' THEN OI_ITO_AMT
			END AS ITO_M8_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '09' THEN OI_ITO_AMT
			END AS ITO_M9_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '10' THEN OI_ITO_AMT
			END AS ITO_M10_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '11' THEN OI_ITO_AMT
			END AS ITO_M11_AMT,
			CASE SUBSTRING(YEAR_MONTH,5,2)
				WHEN '12' THEN OI_ITO_AMT
			END AS ITO_M12_AMT
		FROM OI_IF_ITO AS OI
		LEFT JOIN COMMON_PROJECT AS PRJ
		ON OI.PRJ_NO = PRJ.PRJ_NO
		LEFT JOIN OI_ITO_MAP AS MAP
		ON OI.VENDOR_CD = MAP.VENDOR_CD
		LEFT JOIN COMMON_CODE_ITEM AS TP
		ON (
			UPPER(REPLACE(PRJ.PRJ_TP_CD,' ','')) = UPPER(REPLACE(TP.NAME,' ',''))
			OR UPPER(REPLACE(PRJ.PRJ_TP_CD,' ','')) = UPPER(REPLACE(TP.VALUE,' ',''))
			OR UPPER(REPLACE(PRJ.PRJ_TP_CD,' ','')) = UPPER(REPLACE(TP.MEMO,' ',''))	-- temp
		)
		AND TP.HEADER_ID = (
			SELECT ID FROM COMMON_CODE_HEADER WHERE UPPER(CATEGORY) = 'PROJECT_TYPE' LIMIT 1
		)
		WHERE OI.VER = :VER
		-- AND OI.FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
	)
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		PRJ_TP_NM, 
		IFNULL(ITO_M1_AMT,0),
		IFNULL(ITO_M2_AMT,0),
		IFNULL(ITO_M3_AMT,0),
		IFNULL(ITO_M4_AMT,0),
		IFNULL(ITO_M5_AMT,0),
		IFNULL(ITO_M6_AMT,0),
		IFNULL(ITO_M7_AMT,0),
		IFNULL(ITO_M8_AMT,0),
		IFNULL(ITO_M9_AMT,0),
		IFNULL(ITO_M10_AMT,0),
		IFNULL(ITO_M11_AMT,0),
		IFNULL(ITO_M12_AMT,0)
	FROM IF_DATA;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'OI_IF_ITO', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);

	-- OI_WIDEVIEW

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'OI_ITO';

	INSERT INTO OI_WIDEVIEW (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		-- PRJ_TP_CD,
		PRJ_TP_NM,
		-- PRJ_NO,
		ITO_TOTAL_AMT,
		ITO_M1_AMT,
		ITO_M2_AMT,
		ITO_M3_AMT,
		ITO_M4_AMT,
		ITO_M5_AMT,
		ITO_M6_AMT,
		ITO_M7_AMT,
		ITO_M8_AMT,
		ITO_M9_AMT,
		ITO_M10_AMT,
		ITO_M11_AMT,
		ITO_M12_AMT
	)
	WITH IF_DATA AS (
		SELECT 
			VER,
			YEAR,
			MONTH,
			CCORG_CD,
			ITO_TYPE,
			-- PRJ_TP_CD,
			PRJ_TP_NM,
			-- PRJ_NO,
			SUM(ITO_TOTAL_AMT) AS ITO_TOTAL_AMT,
			SUM(ITO_M1_AMT) AS ITO_M1_AMT,
			SUM(ITO_M2_AMT) AS ITO_M2_AMT,
			SUM(ITO_M3_AMT) AS ITO_M3_AMT,
			SUM(ITO_M4_AMT) AS ITO_M4_AMT,
			SUM(ITO_M5_AMT) AS ITO_M5_AMT,
			SUM(ITO_M6_AMT) AS ITO_M6_AMT,
			SUM(ITO_M7_AMT) AS ITO_M7_AMT,
			SUM(ITO_M8_AMT) AS ITO_M8_AMT,
			SUM(ITO_M9_AMT) AS ITO_M9_AMT,
			SUM(ITO_M10_AMT) AS ITO_M10_AMT,
			SUM(ITO_M11_AMT) AS ITO_M11_AMT,
			SUM(ITO_M12_AMT) AS ITO_M12_AMT
		FROM(
			SELECT 
				OI.*,
				SUBSTRING(YEAR_MONTH,1,4) AS MONTH,
				PRJ.SALE_CCORG_CD AS CCORG_CD,
				CASE PRJ.PRJ_TP_CD
					WHEN '100025' THEN 'SI'
					ELSE 'OS'
				END AS PRJ_TP_NM,
				-- PRJ.SI_OS_DIV_CD AS PRJ_TP_NM, -- 변환 필요
				( OI.ITO_M1_AMT + OI.ITO_M2_AMT + OI.ITO_M3_AMT + OI.ITO_M4_AMT
				+ OI.ITO_M5_AMT + OI.ITO_M6_AMT + OI.ITO_M7_AMT + OI.ITO_M8_AMT
				+  OI.ITO_M9_AMT + OI.ITO_M10_AMT + OI.ITO_M11_AMT + OI.ITO_M12_AMT )
				AS ITO_TOTAL_AMT
			FROM (
				SELECT
					VER,
					YEAR,
					YEAR_MONTH,
					PRJ_NO,
					ITO_TYPE,
					SUM(CASE WHEN MONTH = '01' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M1_AMT,
					SUM(CASE WHEN MONTH = '02' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M2_AMT,
					SUM(CASE WHEN MONTH = '03' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M3_AMT,
					SUM(CASE WHEN MONTH = '04' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M4_AMT,
					SUM(CASE WHEN MONTH = '05' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M5_AMT,
					SUM(CASE WHEN MONTH = '06' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M6_AMT,
					SUM(CASE WHEN MONTH = '07' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M7_AMT,
					SUM(CASE WHEN MONTH = '08' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M8_AMT,
					SUM(CASE WHEN MONTH = '09' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M9_AMT,
					SUM(CASE WHEN MONTH = '10' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M10_AMT,
					SUM(CASE WHEN MONTH = '11' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M11_AMT,
					SUM(CASE WHEN MONTH = '12' THEN OI_ITO_AMT ELSE 0 END) AS ITO_M12_AMT
				FROM (
					SELECT
						OI.*,
						CASE MAP.ITO_TYPE
							WHEN 'ATS' THEN 'ATS'
							WHEN 'AGS' THEN 'AGS'
							ELSE 'K-BP'
						END AS ITO_TYPE
					FROM OI_IF_ITO AS OI
					LEFT JOIN OI_ITO_MAP AS MAP
					ON OI.VENDOR_CD = MAP.VENDOR_CD
				)
				WHERE VER = :VER
				-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
				GROUP BY VER, YEAR, YEAR_MONTH, PRJ_NO, ITO_TYPE
			) AS OI
			LEFT JOIN COMMON_PROJECT AS PRJ
			ON OI.PRJ_NO = PRJ.PRJ_NO
		)
		GROUP BY
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		-- PRJ_TP_CD
		PRJ_TP_NM
		-- PRJ_NO
	)
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		-- PRJ_TP_CD,
		PRJ_TP_NM,
		-- PRJ_NO,
		ITO_TOTAL_AMT,
		ITO_M1_AMT,
		ITO_M2_AMT,
		ITO_M3_AMT,
		ITO_M4_AMT,
		ITO_M5_AMT,
		ITO_M6_AMT,
		ITO_M7_AMT,
		ITO_M8_AMT,
		ITO_M9_AMT,
		ITO_M10_AMT,
		ITO_M11_AMT,
		ITO_M12_AMT
	FROM IF_DATA;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'OI_IF_ITO', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);

	UPDATE OI_IF_ITO
	SET FLAG = 'S'
	WHERE FLAG IS NULL
	AND VER = :VER;

	-- [STEP-3] I/F DATA 등록 처리결과 등록
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-PROCEDURE SUCCESS... COUNT => ['||:V_INSERT_CNT||']'));

END;