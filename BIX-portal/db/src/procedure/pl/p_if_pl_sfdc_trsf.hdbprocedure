/**
* PROJECT 정보 I/F TABLE -> BIX TABLE TRANSFER
*
* > O_RESULT : 로그 저장
*/
PROCEDURE P_IF_PL_SFDC_TRSF (
	IN VER NVARCHAR(20),
	OUT O_RESULT TABLE (
		RESULT_CODE NVARCHAR(30)
		, VER NVARCHAR(20)
		, SQL_ERROR_CODE NVARCHAR(30)
		, SQL_ERROR_MESSAGE NVARCHAR(500)
	)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN
USING SQLSCRIPT_PRINT AS LIB;

	DECLARE V_USER_NAME NVARCHAR(10) = 'IF_SYS';
	DECLARE V_START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
	DECLARE V_IF_TABLE NVARCHAR(50) DEFAULT 'PL_IF_SFDC';
	DECLARE V_INSERT_CNT INTEGER = 0;
	DECLARE V_DUMMY INTEGER;

	/* SQL ERROR 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;

		:O_RESULT.INSERT(('NG', :VER, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500)));

		INSERT INTO COMMON_INTERFACE_LOG
		(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
		VALUES
		(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, NULL, NULL, false, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,500));

	END;

	/***********************************************
	VALIDATION
	***********************************************/

	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-STEP [PROCEDURE START]'));

	-- [STEP-1] I/F 테이블 확인 (해당 버전 데이터가 IF 테이블에 존재하는지 체크)
	
	SELECT 1
	INTO V_DUMMY
	FROM PL_IF_SFDC
	WHERE VER = :VER
	-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
	LIMIT 1
	;
		
	-- [STEP-2] IF DATA 등록

	-- CUSTOMER MASTER 에 SFDC 데이터 이용하여 고객-Account 정보 업데이트

	MERGE INTO COMMON_CUSTOMER AS T
	USING (
		SELECT
			DISTINCT CSTCO_CD, BIZ_TP_ACCOUNT_CD
		FROM PL_IF_SFDC
		WHERE BIZ_TP_ACCOUNT_CD <> ''
		AND VER = :VER
	) AS S
	ON (
	1=1
	AND T.CODE = S.CSTCO_CD
	)
	WHEN MATCHED THEN 
		UPDATE SET
		T.BIZ_TP_ACCOUNT_CD = S.BIZ_TP_ACCOUNT_CD;

	-- PL_CONTRACT_AMT

	-- INSERT INTO PL_CONTRACT_AMT (
	-- 	-- 인터페이스 > 본테이블 이관 공통컬럼
	-- 	CREATEDAT,
	-- 	CREATEDBY,
	-- 	MODIFIEDAT,
	-- 	MODIFIEDBY,
	-- 	VER,
	-- 	-- 테이블 데이터 컬럼
	-- 	YEAR,
	-- 	PRJ_NO_SFDC,
	-- 	PRJ_NO,
	-- 	BIZ_OPP_NO_SFDC,
	-- 	BIZ_OPP_NO,
	-- 	BIZ_OPP_NM,
	-- 	DGTR_TASK_CD,  
	-- 	BIZ_TP_ACCOUNT_CD,
	-- 	PRJ_TARGET_M1_AMT,
	-- 	PRJ_TARGET_M2_AMT,
	-- 	PRJ_TARGET_M3_AMT,
	-- 	PRJ_TARGET_M4_AMT,
	-- 	PRJ_TARGET_M5_AMT,
	-- 	PRJ_TARGET_M6_AMT,
	-- 	PRJ_TARGET_M7_AMT,
	-- 	PRJ_TARGET_M8_AMT,
	-- 	PRJ_TARGET_M9_AMT,
	-- 	PRJ_TARGET_M10_AMT,
	-- 	PRJ_TARGET_M11_AMT,
	-- 	PRJ_TARGET_M12_AMT
	-- )
	-- WITH IF_DATA AS (
	-- 	SELECT 
	-- 		VER,
	-- 		YEAR,
	-- 		PRJ_NO_SFDC,
	-- 		PRJ_NO,
	-- 		BIZ_OPP_NO_SFDC,
	-- 		BIZ_OPP_NO,
	-- 		BIZ_OPP_NM,
	-- 		DGTR_TASK_CD,  
	-- 		BIZ_TP_ACCOUNT_CD,
	-- 		PRJ_TARGET_M1_AMT,
	-- 		PRJ_TARGET_M2_AMT,
	-- 		PRJ_TARGET_M3_AMT,
	-- 		PRJ_TARGET_M4_AMT,
	-- 		PRJ_TARGET_M5_AMT,
	-- 		PRJ_TARGET_M6_AMT,
	-- 		PRJ_TARGET_M7_AMT,
	-- 		PRJ_TARGET_M8_AMT,
	-- 		PRJ_TARGET_M9_AMT,
	-- 		PRJ_TARGET_M10_AMT,
	-- 		PRJ_TARGET_M11_AMT,
	-- 		PRJ_TARGET_M12_AMT
	-- 	FROM PL_IF_SFDC
	-- 	WHERE FLAG IS NULL
	-- 	-- AND VER = :V_VER
	-- 	AND (
	-- 		PRJ_TARGET_M1_AMT > 0 OR
	-- 		PRJ_TARGET_M2_AMT > 0 OR
	-- 		PRJ_TARGET_M3_AMT > 0 OR
	-- 		PRJ_TARGET_M4_AMT > 0 OR
	-- 		PRJ_TARGET_M5_AMT > 0 OR
	-- 		PRJ_TARGET_M6_AMT > 0 OR
	-- 		PRJ_TARGET_M7_AMT > 0 OR
	-- 		PRJ_TARGET_M8_AMT > 0 OR
	-- 		PRJ_TARGET_M9_AMT > 0 OR
	-- 		PRJ_TARGET_M10_AMT > 0 OR
	-- 		PRJ_TARGET_M11_AMT > 0 OR
	-- 		PRJ_TARGET_M12_AMT > 0
	-- 	)
	-- )
	-- SELECT
	-- 	-- 인터페이스 > 본테이블 이관 공통컬럼
	-- 	:V_START_TIME,
	-- 	:V_USER_NAME,
	-- 	:V_START_TIME,
	-- 	:V_USER_NAME,
	-- 	VER,
	-- 	-- 테이블 데이터 컬럼
	-- 	YEAR,
	-- 	PRJ_NO_SFDC,
	-- 	PRJ_NO,
	-- 	BIZ_OPP_NO_SFDC,
	-- 	BIZ_OPP_NO,
	-- 	BIZ_OPP_NM,
	-- 	DGTR_TASK_CD,  
	-- 	BIZ_TP_ACCOUNT_CD,
	-- 	PRJ_TARGET_M1_AMT,
	-- 	PRJ_TARGET_M2_AMT,
	-- 	PRJ_TARGET_M3_AMT,
	-- 	PRJ_TARGET_M4_AMT,
	-- 	PRJ_TARGET_M5_AMT,
	-- 	PRJ_TARGET_M6_AMT,
	-- 	PRJ_TARGET_M7_AMT,
	-- 	PRJ_TARGET_M8_AMT,
	-- 	PRJ_TARGET_M9_AMT,
	-- 	PRJ_TARGET_M10_AMT,
	-- 	PRJ_TARGET_M11_AMT,
	-- 	PRJ_TARGET_M12_AMT
	-- FROM IF_DATA;     

	-- COMMON_PROJECT
	
	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'COMMON_PROJECT';

	MERGE INTO COMMON_PROJECT T
	USING (
		SELECT DISTINCT -- YEAR 가 다른 두 건 이상 데이터의 경우 제외처리
			VER,
			CASE
				WHEN PRJ_NO IS NOT NULL AND PRJ_NO <> '' THEN PRJ_NO
				WHEN PRJ_NO_SFDC IS NOT NULL AND PRJ_NO_SFDC <> '' THEN PRJ_NO_SFDC
			ELSE SFDC.ID
			END AS PRJ_NO,
			'SFDC' AS IF_SOURCE,
			CSTCO_CD,
			RODR_CCORG_CD,
			SALE_CCORG_CD,
			PRJ_PRFM_STR_DT,
			PRJ_PRFM_END_DT,
			RELSCO_YN,
			MARGIN_RATE,
			DEAL_STAGE_CD,
			PRJ_TP_NM,
			TP.VALUE AS PRJ_TP_CD,
			BD1.NAME AS BD_N1_CD,
			BD2.NAME AS BD_N2_CD,
			DGTR_TASK_CD,
			DGTR_TASK_NM,
			BIZ_TP_ACCOUNT_CD,
			CLS_RSN_TP_CD,
			CASE
				WHEN SUBSTRING(PRJ_PRFM_STR_DT, 1, 4) < TO_CHAR( UTCTOLOCAL( CURRENT_TIMESTAMP, 'Asia/Seoul' ), 'YYYY' ) THEN TRUE
			ELSE FALSE END AS CROV_DIV_YN,		-- 이월 여부
			CASE WHEN (PRJ_NO IS NOT NULL OR PRJ_NO <> '') AND SUBSTRING(PRJ_NO, 1, 4) = '2011' THEN TRUE
			ELSE FALSE END	AS ITSM_DIV_YN		-- ITSM 여부
		FROM PL_IF_SFDC AS SFDC
		LEFT JOIN COMMON_CODE_ITEM AS TP
		ON UPPER(REPLACE(SFDC.PRJ_TP_NM,' ','')) = UPPER(REPLACE(TP.NAME,' ',''))
		AND TP.HEADER_ID = (
			SELECT ID FROM COMMON_CODE_HEADER WHERE UPPER(CATEGORY) = 'PROJECT_TYPE' LIMIT 1
		)
		LEFT JOIN COMMON_CODE_ITEM AS BD1
			ON TP.VALUE_OPT1 = BD1.VALUE
			AND TP.HEADER_OPT1_ID = BD1.HEADER_ID
		LEFT JOIN COMMON_CODE_ITEM AS BD2
			ON TP.VALUE_OPT2 = BD2.VALUE
			AND TP.HEADER_OPT2_ID = BD2.HEADER_ID
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND UPPER(DEAL_STAGE_CD) NOT IN ('CONTRACTED', 'DESELECTED', 'DEAL LOST')
	) AS S
	ON (
		1=1
		AND T.PRJ_NO = S.PRJ_NO
		AND T.VER = S.VER
	)
	-- WHEN MATCHED THEN
	-- 	UPDATE SET
	-- 		T.MODIFIEDAT = :V_START_TIME,
	-- 		T.MODIFIEDBY = :V_USER_NAME,
	-- 		T.DGTR_TASK_CD = CASE WHEN S.DGTR_TASK_CD <> '' THEN S.DGTR_TASK_CD ELSE T.DGTR_TASK_CD END,
	-- 		T.DGTR_TASK_NM = CASE WHEN S.DGTR_TASK_NM <> '' THEN S.DGTR_TASK_NM ELSE T.DGTR_TASK_NM END,
	-- 		T.BIZ_TP_ACCOUNT_CD = CASE WHEN S.BIZ_TP_ACCOUNT_CD <> '' THEN S.BIZ_TP_ACCOUNT_CD ELSE T.BIZ_TP_ACCOUNT_CD END,
	-- 		T.CLS_RSN_TP_CD = CASE WHEN S.CLS_RSN_TP_CD <> '' THEN S.CLS_RSN_TP_CD ELSE T.CLS_RSN_TP_CD END,
	-- 		T.BD_N1_CD = S.BD_N1_CD,
	-- 		T.BD_N2_CD = S.BD_N2_CD
	WHEN NOT MATCHED THEN
		INSERT (
			-- 인터페이스 > 본테이블 이관 공통컬럼
			CREATEDAT,
			CREATEDBY,
			MODIFIEDAT,
			MODIFIEDBY,
			VER,
			-- 테이블 데이터 컬럼
			PRJ_NO,
			CSTCO_CD,
			RODR_CCORG_CD,
			SALE_CCORG_CD,
			PRJ_PRFM_STR_DT,
			PRJ_PRFM_END_DT,
			RELSCO_YN,
			MARGIN_RATE,
			DEAL_STAGE_CD,
			PRJ_TP_NM,
			PRJ_TP_CD,
			BD_N1_CD,
			BD_N2_CD,
			DGTR_TASK_CD,
			DGTR_TASK_NM,
			BIZ_TP_ACCOUNT_CD,
			CLS_RSN_TP_CD,
			CROV_DIV_YN,
			ITSM_DIV_YN
		)
		VALUES (
			-- 인터페이스 > 본테이블 이관 공통컬럼
			:V_START_TIME,
			:V_USER_NAME,
			:V_START_TIME,
			:V_USER_NAME,
			S.VER,
			-- 테이블 데이터 컬럼
			S.PRJ_NO,
			S.CSTCO_CD,
			S.RODR_CCORG_CD,
			S.SALE_CCORG_CD,
			S.PRJ_PRFM_STR_DT,
			S.PRJ_PRFM_END_DT,
			S.RELSCO_YN,
			S.MARGIN_RATE,
			S.DEAL_STAGE_CD,
			S.PRJ_TP_NM,
			S.PRJ_TP_CD,
			S.BD_N1_CD,
			S.BD_N2_CD,
			S.DGTR_TASK_CD,
			S.DGTR_TASK_NM,
			S.BIZ_TP_ACCOUNT_CD,
			S.CLS_RSN_TP_CD,
			S.CROV_DIV_YN,
			S.ITSM_DIV_YN
		);

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	

	-- PL_WIDEVIEW

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'PL_WIDEVIEW';

	INSERT INTO PL_WIDEVIEW (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		PRJ_NO,
		SEQ,
		SRC_TYPE,
		RODR_M1_AMT,
		RODR_M2_AMT,
		RODR_M3_AMT,
		RODR_M4_AMT,
		RODR_M5_AMT,
		RODR_M6_AMT,
		RODR_M7_AMT,
		RODR_M8_AMT,
		RODR_M9_AMT,
		RODR_M10_AMT,
		RODR_M11_AMT,
		RODR_M12_AMT,
		SALE_M1_AMT,
		SALE_M2_AMT,
		SALE_M3_AMT,
		SALE_M4_AMT,
		SALE_M5_AMT,
		SALE_M6_AMT,
		SALE_M7_AMT,
		SALE_M8_AMT,
		SALE_M9_AMT,
		SALE_M10_AMT,
		SALE_M11_AMT,
		SALE_M12_AMT,
		PRJ_PRFM_M1_AMT,
		PRJ_PRFM_M2_AMT,
		PRJ_PRFM_M3_AMT,
		PRJ_PRFM_M4_AMT,
		PRJ_PRFM_M5_AMT,
		PRJ_PRFM_M6_AMT,
		PRJ_PRFM_M7_AMT,
		PRJ_PRFM_M8_AMT,
		PRJ_PRFM_M9_AMT,
		PRJ_PRFM_M10_AMT,
		PRJ_PRFM_M11_AMT,
		PRJ_PRFM_M12_AMT,
		MARGIN_M1_AMT,
		MARGIN_M2_AMT,
		MARGIN_M3_AMT,
		MARGIN_M4_AMT,
		MARGIN_M5_AMT,
		MARGIN_M6_AMT,
		MARGIN_M7_AMT,
		MARGIN_M8_AMT,
		MARGIN_M9_AMT,
		MARGIN_M10_AMT,
		MARGIN_M11_AMT,
		MARGIN_M12_AMT
	)
	WITH IF_DATA AS (
		SELECT
			VER,
			YEAR,
			SUBSTRING(:VER,6,2) AS MONTH,
			CASE
				WHEN PRJ_NO IS NOT NULL AND PRJ_NO <> '' THEN PRJ_NO
				WHEN PRJ_NO_SFDC IS NOT NULL AND PRJ_NO_SFDC <> '' THEN PRJ_NO_SFDC
			ELSE SFDC.ID
			END AS PRJ_NO,
			ROW_NUMBER() OVER (PARTITION BY PRJ_NO) AS SEQ,
			'D' AS SRC_TYPE,
			IFNULL(PRJ_TARGET_M1_AMT,0) AS RODR_M1_AMT,
			IFNULL(PRJ_TARGET_M2_AMT,0) AS RODR_M2_AMT,
			IFNULL(PRJ_TARGET_M3_AMT,0) AS RODR_M3_AMT,
			IFNULL(PRJ_TARGET_M4_AMT,0) AS RODR_M4_AMT,
			IFNULL(PRJ_TARGET_M5_AMT,0) AS RODR_M5_AMT,
			IFNULL(PRJ_TARGET_M6_AMT,0) AS RODR_M6_AMT,
			IFNULL(PRJ_TARGET_M7_AMT,0) AS RODR_M7_AMT,
			IFNULL(PRJ_TARGET_M8_AMT,0) AS RODR_M8_AMT,
			IFNULL(PRJ_TARGET_M9_AMT,0) AS RODR_M9_AMT,
			IFNULL(PRJ_TARGET_M10_AMT,0) AS RODR_M10_AMT,
			IFNULL(PRJ_TARGET_M11_AMT,0) AS RODR_M11_AMT,
			IFNULL(PRJ_TARGET_M12_AMT,0) AS RODR_M12_AMT,
			IFNULL(SALE_M1_AMT,0) AS SALE_M1_AMT,
			IFNULL(SALE_M2_AMT,0) AS SALE_M2_AMT,
			IFNULL(SALE_M3_AMT,0) AS SALE_M3_AMT,
			IFNULL(SALE_M4_AMT,0) AS SALE_M4_AMT,
			IFNULL(SALE_M5_AMT,0) AS SALE_M5_AMT,
			IFNULL(SALE_M6_AMT,0) AS SALE_M6_AMT,
			IFNULL(SALE_M7_AMT,0) AS SALE_M7_AMT,
			IFNULL(SALE_M8_AMT,0) AS SALE_M8_AMT,
			IFNULL(SALE_M9_AMT,0) AS SALE_M9_AMT,
			IFNULL(SALE_M10_AMT,0) AS SALE_M10_AMT,
			IFNULL(SALE_M11_AMT,0) AS SALE_M11_AMT,
			IFNULL(SALE_M12_AMT,0) AS SALE_M12_AMT,
			IFNULL(PRJ_COST_M1_AMT,0) AS PRJ_PRFM_M1_AMT,
			IFNULL(PRJ_COST_M2_AMT,0) AS PRJ_PRFM_M2_AMT,
			IFNULL(PRJ_COST_M3_AMT,0) AS PRJ_PRFM_M3_AMT,
			IFNULL(PRJ_COST_M4_AMT,0) AS PRJ_PRFM_M4_AMT,
			IFNULL(PRJ_COST_M5_AMT,0) AS PRJ_PRFM_M5_AMT,
			IFNULL(PRJ_COST_M6_AMT,0) AS PRJ_PRFM_M6_AMT,
			IFNULL(PRJ_COST_M7_AMT,0) AS PRJ_PRFM_M7_AMT,
			IFNULL(PRJ_COST_M8_AMT,0) AS PRJ_PRFM_M8_AMT,
			IFNULL(PRJ_COST_M9_AMT,0) AS PRJ_PRFM_M9_AMT,
			IFNULL(PRJ_COST_M10_AMT,0) AS PRJ_PRFM_M10_AMT,
			IFNULL(PRJ_COST_M11_AMT,0) AS PRJ_PRFM_M11_AMT,
			IFNULL(PRJ_COST_M12_AMT,0) AS PRJ_PRFM_M12_AMT,
			IFNULL(SALE_M1_AMT,0) - IFNULL(PRJ_COST_M1_AMT,0) AS MARGIN_M1_AMT,
			IFNULL(SALE_M2_AMT,0) - IFNULL(PRJ_COST_M2_AMT,0) AS MARGIN_M2_AMT,
			IFNULL(SALE_M3_AMT,0) - IFNULL(PRJ_COST_M3_AMT,0) AS MARGIN_M3_AMT,
			IFNULL(SALE_M4_AMT,0) - IFNULL(PRJ_COST_M4_AMT,0) AS MARGIN_M4_AMT,
			IFNULL(SALE_M5_AMT,0) - IFNULL(PRJ_COST_M5_AMT,0) AS MARGIN_M5_AMT,
			IFNULL(SALE_M6_AMT,0) - IFNULL(PRJ_COST_M6_AMT,0) AS MARGIN_M6_AMT,
			IFNULL(SALE_M7_AMT,0) - IFNULL(PRJ_COST_M7_AMT,0) AS MARGIN_M7_AMT,
			IFNULL(SALE_M8_AMT,0) - IFNULL(PRJ_COST_M8_AMT,0) AS MARGIN_M8_AMT,
			IFNULL(SALE_M9_AMT,0) - IFNULL(PRJ_COST_M9_AMT,0) AS MARGIN_M9_AMT,
			IFNULL(SALE_M10_AMT,0) - IFNULL(PRJ_COST_M10_AMT,0) AS MARGIN_M10_AMT,
			IFNULL(SALE_M11_AMT,0) - IFNULL(PRJ_COST_M11_AMT,0) AS MARGIN_M11_AMT,
			IFNULL(SALE_M12_AMT,0) - IFNULL(PRJ_COST_M12_AMT,0) AS MARGIN_M12_AMT
		FROM PL_IF_SFDC AS SFDC
		WHERE VER = :VER
		AND YEAR = SUBSTRING(:VER,2,4)
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND UPPER(DEAL_STAGE_CD) NOT IN ('CONTRACTED', 'DESELECTED', 'DEAL LOST')
		-- AND SFDC.PRJ_NO_SFDC IN (	-- SFDC 인터페이스에 미래 데이터 추가 / 올해를 포함하는 SFDC 건 수에 대해서만 WIDEVIEW 에 추가
		-- 	SELECT PRJ_NO_SFDC
		-- 	FROM PL_IF_SFDC
		-- 	WHERE YEAR = TO_VARCHAR(YEAR(CURRENT_DATE))
		-- )
	) 
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		MONTH,
		PRJ_NO,
		SEQ,
		SRC_TYPE,
		RODR_M1_AMT,
		RODR_M2_AMT,
		RODR_M3_AMT,
		RODR_M4_AMT,
		RODR_M5_AMT,
		RODR_M6_AMT,
		RODR_M7_AMT,
		RODR_M8_AMT,
		RODR_M9_AMT,
		RODR_M10_AMT,
		RODR_M11_AMT,
		RODR_M12_AMT,
		SALE_M1_AMT,
		SALE_M2_AMT,
		SALE_M3_AMT,
		SALE_M4_AMT,
		SALE_M5_AMT,
		SALE_M6_AMT,
		SALE_M7_AMT,
		SALE_M8_AMT,
		SALE_M9_AMT,
		SALE_M10_AMT,
		SALE_M11_AMT,
		SALE_M12_AMT,
		PRJ_PRFM_M1_AMT,
		PRJ_PRFM_M2_AMT,
		PRJ_PRFM_M3_AMT,
		PRJ_PRFM_M4_AMT,
		PRJ_PRFM_M5_AMT,
		PRJ_PRFM_M6_AMT,
		PRJ_PRFM_M7_AMT,
		PRJ_PRFM_M8_AMT,
		PRJ_PRFM_M9_AMT,
		PRJ_PRFM_M10_AMT,
		PRJ_PRFM_M11_AMT,
		PRJ_PRFM_M12_AMT,
		MARGIN_M1_AMT,
		MARGIN_M2_AMT,
		MARGIN_M3_AMT,
		MARGIN_M4_AMT,
		MARGIN_M5_AMT,
		MARGIN_M6_AMT,
		MARGIN_M7_AMT,
		MARGIN_M8_AMT,
		MARGIN_M9_AMT,
		MARGIN_M10_AMT,
		MARGIN_M11_AMT,
		MARGIN_M12_AMT
	FROM IF_DATA;
		
	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	

	-- 'ERP' src_type 'E' 데이터 RODR 컬럼값 업데이트

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'PL_WIDEVIEW';

	MERGE INTO PL_WIDEVIEW T
	USING (
		SELECT * FROM PL_IF_SFDC
			WHERE VER = :VER
			-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
	) AS S
	ON (
		1=1
		AND T.YEAR = S.YEAR
		AND T.MONTH = SUBSTRING(:VER,6,2)
		AND T.PRJ_NO = S.PRJ_NO
		AND T.SRC_TYPE = 'E'
		-- 최신 버전끼리 붙이는 조건 추가
	)
	WHEN MATCHED THEN
		UPDATE SET
		T.MODIFIEDAT = :V_START_TIME,
		T.MODIFIEDBY = :V_USER_NAME,
		T.RODR_M1_AMT = IFNULL(S.PRJ_TARGET_M1_AMT,0),
		T.RODR_M2_AMT = IFNULL(S.PRJ_TARGET_M2_AMT,0),
		T.RODR_M3_AMT = IFNULL(S.PRJ_TARGET_M3_AMT,0),
		T.RODR_M4_AMT = IFNULL(S.PRJ_TARGET_M4_AMT,0),
		T.RODR_M5_AMT = IFNULL(S.PRJ_TARGET_M5_AMT,0),
		T.RODR_M6_AMT = IFNULL(S.PRJ_TARGET_M6_AMT,0),
		T.RODR_M7_AMT = IFNULL(S.PRJ_TARGET_M7_AMT,0),
		T.RODR_M8_AMT = IFNULL(S.PRJ_TARGET_M8_AMT,0),
		T.RODR_M9_AMT = IFNULL(S.PRJ_TARGET_M9_AMT,0),
		T.RODR_M10_AMT = IFNULL(S.PRJ_TARGET_M10_AMT,0),
		T.RODR_M11_AMT = IFNULL(S.PRJ_TARGET_M11_AMT,0),
		T.RODR_M12_AMT = IFNULL(S.PRJ_TARGET_M12_AMT,0)
		;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	

	-- 'ERP' src_type 'WA' 데이터 RODR 컬럼값 업데이트

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'PL_WIDEVIEW';

	MERGE INTO PL_WIDEVIEW T
	USING (
		SELECT * FROM PL_IF_SFDC
			WHERE VER = :VER
			-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
	) AS S
	ON (
		1=1
		AND T.YEAR = S.YEAR
		AND T.MONTH = SUBSTRING(:VER,6,2)
		AND T.PRJ_NO = S.PRJ_NO
		AND T.SRC_TYPE = 'WA' 
	)
	WHEN MATCHED THEN
		UPDATE SET
		T.MODIFIEDAT = :V_START_TIME,
		T.MODIFIEDBY = :V_USER_NAME,
		T.RODR_M1_AMT = IFNULL(S.PRJ_TARGET_M1_AMT,0),
		T.RODR_M2_AMT = IFNULL(S.PRJ_TARGET_M2_AMT,0),
		T.RODR_M3_AMT = IFNULL(S.PRJ_TARGET_M3_AMT,0),
		T.RODR_M4_AMT = IFNULL(S.PRJ_TARGET_M4_AMT,0),
		T.RODR_M5_AMT = IFNULL(S.PRJ_TARGET_M5_AMT,0),
		T.RODR_M6_AMT = IFNULL(S.PRJ_TARGET_M6_AMT,0),
		T.RODR_M7_AMT = IFNULL(S.PRJ_TARGET_M7_AMT,0),
		T.RODR_M8_AMT = IFNULL(S.PRJ_TARGET_M8_AMT,0),
		T.RODR_M9_AMT = IFNULL(S.PRJ_TARGET_M9_AMT,0),
		T.RODR_M10_AMT = IFNULL(S.PRJ_TARGET_M10_AMT,0),
		T.RODR_M11_AMT = IFNULL(S.PRJ_TARGET_M11_AMT,0),
		T.RODR_M12_AMT = IFNULL(S.PRJ_TARGET_M12_AMT,0)
		;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	

	-- PL_SFDC_CONTRACT

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'PL_SFDC_CONTRACT';

	INSERT INTO PL_SFDC_CONTRACT (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		ID,
		YEAR,
		MONTH,
		PRJ_NO_SFDC,
		PRJ_NO,
		PRJ_PRFM_STR_DT,
		PRJ_PRFM_END_DT,
		PRJ_TP_CD,
		PRJ_TP_NM,
		BIZ_OPP_NO_SFDC,
		BIZ_OPP_NO,
		BIZ_OPP_NM,
		DEAL_STAGE_CD,
		DEAL_STAGE_CHG_DT,
		CSTCO_CD,
		CSTCO_NAME,
		RODR_CCORG_CD,
		SALE_CCORG_CD,
		DGTR_TASK_CD,
		BIZ_TP_ACCOUNT_CD,
		CLS_RSN_TP_CD,
		CLS_RSN_TP_NM,
		EXPECTED_CONTRACT_DATE,
		MARGIN_RATE,
		BD_N2_CD,
		RELSCO_YN,
		RODR_M1_AMT,
		RODR_M2_AMT,
		RODR_M3_AMT,
		RODR_M4_AMT,
		RODR_M5_AMT,
		RODR_M6_AMT,
		RODR_M7_AMT,
		RODR_M8_AMT,
		RODR_M9_AMT,
		RODR_M10_AMT,
		RODR_M11_AMT,
		RODR_M12_AMT,
		SALE_M1_AMT,
		SALE_M2_AMT,
		SALE_M3_AMT,
		SALE_M4_AMT,
		SALE_M5_AMT,
		SALE_M6_AMT,
		SALE_M7_AMT,
		SALE_M8_AMT,
		SALE_M9_AMT,
		SALE_M10_AMT,
		SALE_M11_AMT,
		SALE_M12_AMT,
		PRJ_PRFM_M1_AMT,
		PRJ_PRFM_M2_AMT,
		PRJ_PRFM_M3_AMT,
		PRJ_PRFM_M4_AMT,
		PRJ_PRFM_M5_AMT,
		PRJ_PRFM_M6_AMT,
		PRJ_PRFM_M7_AMT,
		PRJ_PRFM_M8_AMT,
		PRJ_PRFM_M9_AMT,
		PRJ_PRFM_M10_AMT,
		PRJ_PRFM_M11_AMT,
		PRJ_PRFM_M12_AMT,
		MARGIN_M1_AMT,
		MARGIN_M2_AMT,
		MARGIN_M3_AMT,
		MARGIN_M4_AMT,
		MARGIN_M5_AMT,
		MARGIN_M6_AMT,
		MARGIN_M7_AMT,
		MARGIN_M8_AMT,
		MARGIN_M9_AMT,
		MARGIN_M10_AMT,
		MARGIN_M11_AMT,
		MARGIN_M12_AMT
	)
	WITH IF_DATA AS (
		SELECT
			SFDC.VER,
			SFDC.YEAR,
			SUBSTRING(SFDC.VER,6,2) AS MONTH,
			SFDC.ID,	-- SFDC 데이터ID
			SFDC.PRJ_NO_SFDC,
			SFDC.PRJ_NO,
			SFDC.PRJ_PRFM_STR_DT,
			SFDC.PRJ_PRFM_END_DT,
			TP.VALUE AS PRJ_TP_CD,
			SFDC.PRJ_TP_NM,
			SFDC.BIZ_OPP_NO_SFDC,
			SFDC.BIZ_OPP_NO,
			SFDC.BIZ_OPP_NM,
			SFDC.DEAL_STAGE_CD,
			SFDC.DEAL_STAGE_CHG_DT,
			SFDC.CSTCO_CD,
			SFDC.CSTCO_NAME,
			SFDC.RODR_CCORG_CD,
			SFDC.SALE_CCORG_CD,
			SFDC.DGTR_TASK_CD,
			SFDC.BIZ_TP_ACCOUNT_CD,
			SFDC.CLS_RSN_TP_CD,
			SFDC.CLS_RSN_TP_NM,
			SFDC.EXPECTED_CONTRACT_DATE,
			SFDC.MARGIN_RATE,
			SFDC.BD_N2_CD,
			SFDC.RELSCO_YN,
			IFNULL(SFDC.PRJ_TARGET_M1_AMT,0) AS RODR_M1_AMT,
			IFNULL(SFDC.PRJ_TARGET_M2_AMT,0) AS RODR_M2_AMT,
			IFNULL(SFDC.PRJ_TARGET_M3_AMT,0) AS RODR_M3_AMT,
			IFNULL(SFDC.PRJ_TARGET_M4_AMT,0) AS RODR_M4_AMT,
			IFNULL(SFDC.PRJ_TARGET_M5_AMT,0) AS RODR_M5_AMT,
			IFNULL(SFDC.PRJ_TARGET_M6_AMT,0) AS RODR_M6_AMT,
			IFNULL(SFDC.PRJ_TARGET_M7_AMT,0) AS RODR_M7_AMT,
			IFNULL(SFDC.PRJ_TARGET_M8_AMT,0) AS RODR_M8_AMT,
			IFNULL(SFDC.PRJ_TARGET_M9_AMT,0) AS RODR_M9_AMT,
			IFNULL(SFDC.PRJ_TARGET_M10_AMT,0) AS RODR_M10_AMT,
			IFNULL(SFDC.PRJ_TARGET_M11_AMT,0) AS RODR_M11_AMT,
			IFNULL(SFDC.PRJ_TARGET_M12_AMT,0) AS RODR_M12_AMT,
			IFNULL(SFDC.SALE_M1_AMT,0) AS SALE_M1_AMT,
			IFNULL(SFDC.SALE_M2_AMT,0) AS SALE_M2_AMT,
			IFNULL(SFDC.SALE_M3_AMT,0) AS SALE_M3_AMT,
			IFNULL(SFDC.SALE_M4_AMT,0) AS SALE_M4_AMT,
			IFNULL(SFDC.SALE_M5_AMT,0) AS SALE_M5_AMT,
			IFNULL(SFDC.SALE_M6_AMT,0) AS SALE_M6_AMT,
			IFNULL(SFDC.SALE_M7_AMT,0) AS SALE_M7_AMT,
			IFNULL(SFDC.SALE_M8_AMT,0) AS SALE_M8_AMT,
			IFNULL(SFDC.SALE_M9_AMT,0) AS SALE_M9_AMT,
			IFNULL(SFDC.SALE_M10_AMT,0) AS SALE_M10_AMT,
			IFNULL(SFDC.SALE_M11_AMT,0) AS SALE_M11_AMT,
			IFNULL(SFDC.SALE_M12_AMT,0) AS SALE_M12_AMT,
			IFNULL(SFDC.PRJ_COST_M1_AMT,0)	AS PRJ_PRFM_M1_AMT,
			IFNULL(SFDC.PRJ_COST_M2_AMT,0)	AS PRJ_PRFM_M2_AMT,
			IFNULL(SFDC.PRJ_COST_M3_AMT,0)	AS PRJ_PRFM_M3_AMT,
			IFNULL(SFDC.PRJ_COST_M4_AMT,0)	AS PRJ_PRFM_M4_AMT,
			IFNULL(SFDC.PRJ_COST_M5_AMT,0)	AS PRJ_PRFM_M5_AMT,
			IFNULL(SFDC.PRJ_COST_M6_AMT,0)	AS PRJ_PRFM_M6_AMT,
			IFNULL(SFDC.PRJ_COST_M7_AMT,0)	AS PRJ_PRFM_M7_AMT,
			IFNULL(SFDC.PRJ_COST_M8_AMT,0)	AS PRJ_PRFM_M8_AMT,
			IFNULL(SFDC.PRJ_COST_M9_AMT,0)	AS PRJ_PRFM_M9_AMT,
			IFNULL(SFDC.PRJ_COST_M10_AMT,0) AS PRJ_PRFM_M10_AMT,
			IFNULL(SFDC.PRJ_COST_M11_AMT,0) AS PRJ_PRFM_M11_AMT,
			IFNULL(SFDC.PRJ_COST_M12_AMT,0) AS PRJ_PRFM_M12_AMT,
			IFNULL(SFDC.SALE_M1_AMT,0) - IFNULL(SFDC.PRJ_COST_M1_AMT,0) AS MARGIN_M1_AMT,
			IFNULL(SFDC.SALE_M2_AMT,0) - IFNULL(SFDC.PRJ_COST_M2_AMT,0) AS MARGIN_M2_AMT,
			IFNULL(SFDC.SALE_M3_AMT,0) - IFNULL(SFDC.PRJ_COST_M3_AMT,0) AS MARGIN_M3_AMT,
			IFNULL(SFDC.SALE_M4_AMT,0) - IFNULL(SFDC.PRJ_COST_M4_AMT,0) AS MARGIN_M4_AMT,
			IFNULL(SFDC.SALE_M5_AMT,0) - IFNULL(SFDC.PRJ_COST_M5_AMT,0) AS MARGIN_M5_AMT,
			IFNULL(SFDC.SALE_M6_AMT,0) - IFNULL(SFDC.PRJ_COST_M6_AMT,0) AS MARGIN_M6_AMT,
			IFNULL(SFDC.SALE_M7_AMT,0) - IFNULL(SFDC.PRJ_COST_M7_AMT,0) AS MARGIN_M7_AMT,
			IFNULL(SFDC.SALE_M8_AMT,0) - IFNULL(SFDC.PRJ_COST_M8_AMT,0) AS MARGIN_M8_AMT,
			IFNULL(SFDC.SALE_M9_AMT,0) - IFNULL(SFDC.PRJ_COST_M9_AMT,0) AS MARGIN_M9_AMT,
			IFNULL(SFDC.SALE_M10_AMT,0) - IFNULL(SFDC.PRJ_COST_M10_AMT,0) AS MARGIN_M10_AMT,
			IFNULL(SFDC.SALE_M11_AMT,0) - IFNULL(SFDC.PRJ_COST_M11_AMT,0) AS MARGIN_M11_AMT,
			IFNULL(SFDC.SALE_M12_AMT,0) - IFNULL(SFDC.PRJ_COST_M12_AMT,0) AS MARGIN_M12_AMT
		FROM PL_IF_SFDC AS SFDC
		LEFT JOIN COMMON_CODE_ITEM AS TP
		ON UPPER(REPLACE(SFDC.PRJ_TP_NM,' ','')) = UPPER(REPLACE(TP.NAME,' ',''))
		AND TP.HEADER_ID = (
			SELECT ID FROM COMMON_CODE_HEADER WHERE UPPER(CATEGORY) = 'PROJECT_TYPE' LIMIT 1
		)
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		-- AND DEAL_STAGE_CD = 'Contracted'
	)
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		ID,
		YEAR,
		MONTH,
		CASE	-- Deselected 상태의 project 정보가 존재하지 않으면 저장시 SFDC id 사용
			WHEN PRJ_NO_SFDC = '' OR PRJ_NO_SFDC IS NULL THEN ID
			ELSE PRJ_NO_SFDC
		END AS PRJ_NO_SFDC,
		PRJ_NO,
		PRJ_PRFM_STR_DT,
		PRJ_PRFM_END_DT,
		PRJ_TP_CD,
		PRJ_TP_NM,
		BIZ_OPP_NO_SFDC,
		BIZ_OPP_NO,
		BIZ_OPP_NM,
		DEAL_STAGE_CD,
		DEAL_STAGE_CHG_DT,
		CSTCO_CD,
		CSTCO_NAME,
		RODR_CCORG_CD,
		SALE_CCORG_CD,
		DGTR_TASK_CD,
		BIZ_TP_ACCOUNT_CD,
		CLS_RSN_TP_CD,
		CLS_RSN_TP_NM,
		EXPECTED_CONTRACT_DATE,
		MARGIN_RATE,
		BD_N2_CD,
		RELSCO_YN,
		RODR_M1_AMT,
		RODR_M2_AMT,
		RODR_M3_AMT,
		RODR_M4_AMT,
		RODR_M5_AMT,
		RODR_M6_AMT,
		RODR_M7_AMT,
		RODR_M8_AMT,
		RODR_M9_AMT,
		RODR_M10_AMT,
		RODR_M11_AMT,
		RODR_M12_AMT,
		SALE_M1_AMT,
		SALE_M2_AMT,
		SALE_M3_AMT,
		SALE_M4_AMT,
		SALE_M5_AMT,
		SALE_M6_AMT,
		SALE_M7_AMT,
		SALE_M8_AMT,
		SALE_M9_AMT,
		SALE_M10_AMT,
		SALE_M11_AMT,
		SALE_M12_AMT,
		PRJ_PRFM_M1_AMT,
		PRJ_PRFM_M2_AMT,
		PRJ_PRFM_M3_AMT,
		PRJ_PRFM_M4_AMT,
		PRJ_PRFM_M5_AMT,
		PRJ_PRFM_M6_AMT,
		PRJ_PRFM_M7_AMT,
		PRJ_PRFM_M8_AMT,
		PRJ_PRFM_M9_AMT,
		PRJ_PRFM_M10_AMT,
		PRJ_PRFM_M11_AMT,
		PRJ_PRFM_M12_AMT,
		MARGIN_M1_AMT,
		MARGIN_M2_AMT,
		MARGIN_M3_AMT,
		MARGIN_M4_AMT,
		MARGIN_M5_AMT,
		MARGIN_M6_AMT,
		MARGIN_M7_AMT,
		MARGIN_M8_AMT,
		MARGIN_M9_AMT,
		MARGIN_M10_AMT,
		MARGIN_M11_AMT,
		MARGIN_M12_AMT
	FROM IF_DATA;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	
	
	-- OI_ITO_SFDC
	
	V_OI_SFDC = 
	SELECT
		SFDC.*,
		TP.VALUE AS PRJ_TP_CD
	FROM
	(
		SELECT
			VER,
			YEAR,
			SUBSTRING(:VER,6,2) AS MONTH,
			SALE_CCORG_CD AS CCORG_CD,
			'K-BP' AS ITO_TYPE,
			IFNULL(PRJ_TP_NM,'') AS PRJ_TP_NM,
			SUBSTRING(IFNULL(PRJ_TP_NM,''),1,2) AS PRJ_TP_NM_CD,	-- SI/OS 만 추출
			( SUM(IFNULL(PRJ_EL_M1_AMT,0)) + SUM(IFNULL(PRJ_EL_M2_AMT,0)) + SUM(IFNULL(PRJ_EL_M3_AMT,0)) + SUM(IFNULL(PRJ_EL_M4_AMT,0))
			+ SUM(IFNULL(PRJ_EL_M5_AMT,0)) + SUM(IFNULL(PRJ_EL_M6_AMT,0)) + SUM(IFNULL(PRJ_EL_M7_AMT,0)) + SUM(IFNULL(PRJ_EL_M8_AMT,0))
			+  SUM(IFNULL(PRJ_EL_M9_AMT,0)) + SUM(IFNULL(PRJ_EL_M10_AMT,0)) + SUM(IFNULL(PRJ_EL_M11_AMT,0)) + SUM(IFNULL(PRJ_EL_M12_AMT,0)) )
			AS ITO_TOTAL_AMT,
			SUM(IFNULL(PRJ_EL_M1_AMT,0)) AS ITO_M1_AMT,
			SUM(IFNULL(PRJ_EL_M2_AMT,0)) AS ITO_M2_AMT,
			SUM(IFNULL(PRJ_EL_M3_AMT,0)) AS ITO_M3_AMT,
			SUM(IFNULL(PRJ_EL_M4_AMT,0)) AS ITO_M4_AMT,
			SUM(IFNULL(PRJ_EL_M5_AMT,0)) AS ITO_M5_AMT,
			SUM(IFNULL(PRJ_EL_M6_AMT,0)) AS ITO_M6_AMT,
			SUM(IFNULL(PRJ_EL_M7_AMT,0)) AS ITO_M7_AMT,
			SUM(IFNULL(PRJ_EL_M8_AMT,0)) AS ITO_M8_AMT,
			SUM(IFNULL(PRJ_EL_M9_AMT,0)) AS ITO_M9_AMT,
			SUM(IFNULL(PRJ_EL_M10_AMT,0)) AS ITO_M10_AMT,
			SUM(IFNULL(PRJ_EL_M11_AMT,0)) AS ITO_M11_AMT,
			SUM(IFNULL(PRJ_EL_M12_AMT,0)) AS ITO_M12_AMT
		FROM PL_IF_SFDC
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND UPPER(DEAL_STAGE_CD) NOT IN ('CONTRACTED', 'DESELECTED', 'DEAL LOST')
		GROUP BY VER, YEAR, SALE_CCORG_CD, PRJ_TP_NM
		UNION ALL
		SELECT
			VER,
			YEAR,
			SUBSTRING(:VER,6,2) AS MONTH,
			SALE_CCORG_CD AS CCORG_CD,
			'ATS' AS ITO_TYPE,
			IFNULL(PRJ_TP_NM,'') AS PRJ_TP_NM,
			SUBSTRING(IFNULL(PRJ_TP_NM,''),1,2) AS PRJ_TP_NM_CD,	-- SI/OS 만 추출
			( SUM(IFNULL(PRJ_ATS_M1_AMT,0)) + SUM(IFNULL(PRJ_ATS_M2_AMT,0)) + SUM(IFNULL(PRJ_ATS_M3_AMT,0)) + SUM(IFNULL(PRJ_ATS_M4_AMT,0))
			+ SUM(IFNULL(PRJ_ATS_M5_AMT,0)) + SUM(IFNULL(PRJ_ATS_M6_AMT,0)) + SUM(IFNULL(PRJ_ATS_M7_AMT,0)) + SUM(IFNULL(PRJ_ATS_M8_AMT,0))
			+  SUM(IFNULL(PRJ_ATS_M9_AMT,0)) + SUM(IFNULL(PRJ_ATS_M10_AMT,0)) + SUM(IFNULL(PRJ_ATS_M11_AMT,0)) + SUM(IFNULL(PRJ_ATS_M12_AMT,0)) )
			AS ITO_TOTAL_AMT,
			SUM(IFNULL(PRJ_ATS_M1_AMT,0)) AS ITO_M1_AMT,
			SUM(IFNULL(PRJ_ATS_M2_AMT,0)) AS ITO_M2_AMT,
			SUM(IFNULL(PRJ_ATS_M3_AMT,0)) AS ITO_M3_AMT,
			SUM(IFNULL(PRJ_ATS_M4_AMT,0)) AS ITO_M4_AMT,
			SUM(IFNULL(PRJ_ATS_M5_AMT,0)) AS ITO_M5_AMT,
			SUM(IFNULL(PRJ_ATS_M6_AMT,0)) AS ITO_M6_AMT,
			SUM(IFNULL(PRJ_ATS_M7_AMT,0)) AS ITO_M7_AMT,
			SUM(IFNULL(PRJ_ATS_M8_AMT,0)) AS ITO_M8_AMT,
			SUM(IFNULL(PRJ_ATS_M9_AMT,0)) AS ITO_M9_AMT,
			SUM(IFNULL(PRJ_ATS_M10_AMT,0)) AS ITO_M10_AMT,
			SUM(IFNULL(PRJ_ATS_M11_AMT,0)) AS ITO_M11_AMT,
			SUM(IFNULL(PRJ_ATS_M12_AMT,0)) AS ITO_M12_AMT
		FROM PL_IF_SFDC
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND UPPER(DEAL_STAGE_CD) NOT IN ('CONTRACTED', 'DESELECTED', 'DEAL LOST')
		GROUP BY VER, YEAR, SALE_CCORG_CD, PRJ_TP_NM
		UNION ALL
		SELECT
			VER,
			YEAR,
			SUBSTRING(:VER,6,2) AS MONTH,
			SALE_CCORG_CD AS CCORG_CD,
			'AGS' AS ITO_TYPE,
			IFNULL(PRJ_TP_NM,'') AS PRJ_TP_NM,
			SUBSTRING(IFNULL(PRJ_TP_NM,''),1,2) AS PRJ_TP_NM_CD,	-- SI/OS 만 추출
			( SUM(IFNULL(PRJ_AGS_M1_AMT,0)) + SUM(IFNULL(PRJ_AGS_M2_AMT,0)) + SUM(IFNULL(PRJ_AGS_M3_AMT,0)) + SUM(IFNULL(PRJ_AGS_M4_AMT,0))
			+ SUM(IFNULL(PRJ_AGS_M5_AMT,0)) + SUM(IFNULL(PRJ_AGS_M6_AMT,0)) + SUM(IFNULL(PRJ_AGS_M7_AMT,0)) + SUM(IFNULL(PRJ_AGS_M8_AMT,0))
			+  SUM(IFNULL(PRJ_AGS_M9_AMT,0)) + SUM(IFNULL(PRJ_AGS_M10_AMT,0)) + SUM(IFNULL(PRJ_AGS_M11_AMT,0)) + SUM(IFNULL(PRJ_AGS_M12_AMT,0)) )
			AS ITO_TOTAL_AMT,
			SUM(IFNULL(PRJ_AGS_M1_AMT,0)) AS ITO_M1_AMT,
			SUM(IFNULL(PRJ_AGS_M2_AMT,0)) AS ITO_M2_AMT,
			SUM(IFNULL(PRJ_AGS_M3_AMT,0)) AS ITO_M3_AMT,
			SUM(IFNULL(PRJ_AGS_M4_AMT,0)) AS ITO_M4_AMT,
			SUM(IFNULL(PRJ_AGS_M5_AMT,0)) AS ITO_M5_AMT,
			SUM(IFNULL(PRJ_AGS_M6_AMT,0)) AS ITO_M6_AMT,
			SUM(IFNULL(PRJ_AGS_M7_AMT,0)) AS ITO_M7_AMT,
			SUM(IFNULL(PRJ_AGS_M8_AMT,0)) AS ITO_M8_AMT,
			SUM(IFNULL(PRJ_AGS_M9_AMT,0)) AS ITO_M9_AMT,
			SUM(IFNULL(PRJ_AGS_M10_AMT,0)) AS ITO_M10_AMT,
			SUM(IFNULL(PRJ_AGS_M11_AMT,0)) AS ITO_M11_AMT,
			SUM(IFNULL(PRJ_AGS_M12_AMT,0)) AS ITO_M12_AMT
		FROM PL_IF_SFDC
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND UPPER(DEAL_STAGE_CD) NOT IN ('CONTRACTED', 'DESELECTED', 'DEAL LOST')
		GROUP BY VER, YEAR, SALE_CCORG_CD, PRJ_TP_NM
		UNION ALL
		SELECT
			VER,
			YEAR,
			SUBSTRING(:VER,6,2) AS MONTH,
			SALE_CCORG_CD AS CCORG_CD,
			'AI' AS ITO_TYPE,
			IFNULL(PRJ_TP_NM,'') AS PRJ_TP_NM,
			SUBSTRING(IFNULL(PRJ_TP_NM,''),1,2) AS PRJ_TP_NM_CD,	-- SI/OS 만 추출
			( SUM(IFNULL(PRJ_AI_M1_AMT,0)) + SUM(IFNULL(PRJ_AI_M2_AMT,0)) + SUM(IFNULL(PRJ_AI_M3_AMT,0)) + SUM(IFNULL(PRJ_AI_M4_AMT,0))
			+ SUM(IFNULL(PRJ_AI_M5_AMT,0)) + SUM(IFNULL(PRJ_AI_M6_AMT,0)) + SUM(IFNULL(PRJ_AI_M7_AMT,0)) + SUM(IFNULL(PRJ_AI_M8_AMT,0))
			+  SUM(IFNULL(PRJ_AI_M9_AMT,0)) + SUM(IFNULL(PRJ_AI_M10_AMT,0)) + SUM(IFNULL(PRJ_AI_M11_AMT,0)) + SUM(IFNULL(PRJ_AI_M12_AMT,0)) )
			AS ITO_TOTAL_AMT,
			SUM(IFNULL(PRJ_AI_M1_AMT,0)) AS ITO_M1_AMT,
			SUM(IFNULL(PRJ_AI_M2_AMT,0)) AS ITO_M2_AMT,
			SUM(IFNULL(PRJ_AI_M3_AMT,0)) AS ITO_M3_AMT,
			SUM(IFNULL(PRJ_AI_M4_AMT,0)) AS ITO_M4_AMT,
			SUM(IFNULL(PRJ_AI_M5_AMT,0)) AS ITO_M5_AMT,
			SUM(IFNULL(PRJ_AI_M6_AMT,0)) AS ITO_M6_AMT,
			SUM(IFNULL(PRJ_AI_M7_AMT,0)) AS ITO_M7_AMT,
			SUM(IFNULL(PRJ_AI_M8_AMT,0)) AS ITO_M8_AMT,
			SUM(IFNULL(PRJ_AI_M9_AMT,0)) AS ITO_M9_AMT,
			SUM(IFNULL(PRJ_AI_M10_AMT,0)) AS ITO_M10_AMT,
			SUM(IFNULL(PRJ_AI_M11_AMT,0)) AS ITO_M11_AMT,
			SUM(IFNULL(PRJ_AI_M12_AMT,0)) AS ITO_M12_AMT
		FROM PL_IF_SFDC
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND UPPER(DEAL_STAGE_CD) NOT IN ('CONTRACTED', 'DESELECTED', 'DEAL LOST')
		GROUP BY VER, YEAR, SALE_CCORG_CD, PRJ_TP_NM 
	) AS SFDC
	LEFT JOIN COMMON_CODE_ITEM AS TP
	ON UPPER(REPLACE(SFDC.PRJ_TP_NM,' ','')) = UPPER(REPLACE(TP.NAME,' ',''))
	AND TP.HEADER_ID = (
		SELECT ID FROM COMMON_CODE_HEADER WHERE UPPER(CATEGORY) = 'PROJECT_TYPE' LIMIT 1
	)
	;

	-- OI_ITO_SFDC

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'OI_ITO_SFDC';
	
	INSERT INTO OI_ITO_SFDC (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		PRJ_TP_NM,
		ITO_M1_AMT,
		ITO_M2_AMT,
		ITO_M3_AMT,
		ITO_M4_AMT,
		ITO_M5_AMT,
		ITO_M6_AMT,
		ITO_M7_AMT,
		ITO_M8_AMT,
		ITO_M9_AMT,
		ITO_M10_AMT,
		ITO_M11_AMT,
		ITO_M12_AMT
	)
	WITH IF_DATA AS (
		SELECT
			VER,
			YEAR,
			MONTH,
			CCORG_CD,
			ITO_TYPE,
			PRJ_TP_NM_CD,
			SUM(ITO_TOTAL_AMT) AS ITO_TOTAL_AMT,
			SUM(ITO_M1_AMT) AS ITO_M1_AMT,
			SUM(ITO_M2_AMT) AS ITO_M2_AMT,
			SUM(ITO_M3_AMT) AS ITO_M3_AMT,
			SUM(ITO_M4_AMT) AS ITO_M4_AMT,
			SUM(ITO_M5_AMT) AS ITO_M5_AMT,
			SUM(ITO_M6_AMT) AS ITO_M6_AMT,
			SUM(ITO_M7_AMT) AS ITO_M7_AMT,
			SUM(ITO_M8_AMT) AS ITO_M8_AMT,
			SUM(ITO_M9_AMT) AS ITO_M9_AMT,
			SUM(ITO_M10_AMT) AS ITO_M10_AMT,
			SUM(ITO_M11_AMT) AS ITO_M11_AMT,
			SUM(ITO_M12_AMT) AS ITO_M12_AMT
		FROM :V_OI_SFDC
		GROUP BY 
			VER,
			YEAR,
			MONTH,
			CCORG_CD,
			ITO_TYPE,
			PRJ_TP_NM_CD
	)
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		ITO_TYPE,
		PRJ_TP_NM_CD AS PRJ_TP_NM,	-- SI/OS 만 추출
		ITO_M1_AMT,
		ITO_M2_AMT,
		ITO_M3_AMT,
		ITO_M4_AMT,
		ITO_M5_AMT,
		ITO_M6_AMT,
		ITO_M7_AMT,
		ITO_M8_AMT,
		ITO_M9_AMT,
		ITO_M10_AMT,
		ITO_M11_AMT,
		ITO_M12_AMT
	FROM IF_DATA;

	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	

	-- RSP_OPP_LABOR

	V_START_TIME = CURRENT_TIMESTAMP;
	V_IF_TABLE = 'RSP_OPP_LABOR';
	
	INSERT INTO RSP_OPP_LABOR (
		CREATEDAT,
		CREATEDBY,
		MODIFIEDAT,
		MODIFIEDBY,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		BIZ_OPP_NO,
		PRJ_NO_SFDC,
		PRJ_TP_CD,
		PRJ_TP_NM,
		PRFM_STR_DT,
		PRFM_END_DT,
		RECEIVED_ORDER_AMT,
		SALES_AMT,
		MARGIN_RATE,
		OPP_M1_AMT,
		OPP_M2_AMT,
		OPP_M3_AMT,
		OPP_M4_AMT,
		OPP_M5_AMT,
		OPP_M6_AMT,
		OPP_M7_AMT,
		OPP_M8_AMT,
		OPP_M9_AMT,
		OPP_M10_AMT,
		OPP_M11_AMT,
		OPP_M12_AMT
	)
	WITH IF_DATA AS (
		SELECT
			SFDC.VER,
			SFDC.YEAR,
			SUBSTRING(:VER,6,2) AS MONTH,
			SFDC.SALE_CCORG_CD AS CCORG_CD,
			SFDC.BIZ_OPP_NO,
			SFDC.PRJ_NO_SFDC,
			TP.VALUE AS PRJ_TP_CD,
			SFDC.PRJ_TP_NM,
			SFDC.PRJ_PRFM_STR_DT AS PRFM_STR_DT,
			SFDC.PRJ_PRFM_END_DT AS PRFM_END_DT,
			(IFNULL(SFDC.PRJ_TARGET_M1_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M2_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M3_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M4_AMT,0)
			+ IFNULL(SFDC.PRJ_TARGET_M5_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M6_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M7_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M8_AMT,0)
			+ IFNULL(SFDC.PRJ_TARGET_M9_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M10_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M11_AMT,0) + IFNULL(SFDC.PRJ_TARGET_M12_AMT,0)) 
			AS RECEIVED_ORDER_AMT,
			(IFNULL(SFDC.SALE_M1_AMT,0) + IFNULL(SFDC.SALE_M2_AMT,0) + IFNULL(SFDC.SALE_M3_AMT,0) + IFNULL(SFDC.SALE_M4_AMT,0)
			+ IFNULL(SFDC.SALE_M5_AMT,0) + IFNULL(SFDC.SALE_M6_AMT,0) + IFNULL(SFDC.SALE_M7_AMT,0) + IFNULL(SFDC.SALE_M8_AMT,0)
			+ IFNULL(SFDC.SALE_M9_AMT,0) + IFNULL(SFDC.SALE_M10_AMT,0) + IFNULL(SFDC.SALE_M11_AMT,0) + IFNULL(SFDC.SALE_M12_AMT,0)) 
			AS SALES_AMT,
			SFDC.MARGIN_RATE,
			IFNULL(SFDC.PRJ_LABOR_M1_AMT,0) AS OPP_M1_AMT,
			IFNULL(SFDC.PRJ_LABOR_M2_AMT,0) AS OPP_M2_AMT,
			IFNULL(SFDC.PRJ_LABOR_M3_AMT,0) AS OPP_M3_AMT,
			IFNULL(SFDC.PRJ_LABOR_M4_AMT,0) AS OPP_M4_AMT,
			IFNULL(SFDC.PRJ_LABOR_M5_AMT,0) AS OPP_M5_AMT,
			IFNULL(SFDC.PRJ_LABOR_M6_AMT,0) AS OPP_M6_AMT,
			IFNULL(SFDC.PRJ_LABOR_M7_AMT,0) AS OPP_M7_AMT,
			IFNULL(SFDC.PRJ_LABOR_M8_AMT,0) AS OPP_M8_AMT,
			IFNULL(SFDC.PRJ_LABOR_M9_AMT,0) AS OPP_M9_AMT,
			IFNULL(SFDC.PRJ_LABOR_M10_AMT,0) AS OPP_M10_AMT,
			IFNULL(SFDC.PRJ_LABOR_M11_AMT,0) AS OPP_M11_AMT,
			IFNULL(SFDC.PRJ_LABOR_M12_AMT,0) AS OPP_M12_AMT
		FROM PL_IF_SFDC AS SFDC
		LEFT JOIN COMMON_CODE_ITEM AS TP
		ON UPPER(REPLACE(SFDC.PRJ_TP_NM,' ','')) = UPPER(REPLACE(TP.NAME,' ',''))
		AND TP.HEADER_ID = (
			SELECT ID FROM COMMON_CODE_HEADER WHERE UPPER(CATEGORY) = 'PROJECT_TYPE' LIMIT 1
		)
		AND UPPER(SFDC.DEAL_STAGE_CD) IN ('Lead', 'Identified', 'Validated', 'Qualified', 'Negotiated')
		WHERE VER = :VER
		-- AND FLAG IS NULL	-- FLAG 사용 의미가 없어짐, 우선 생략 추후 제거 or 로직 정리
		AND IFNULL(PRJ_LABOR_M1_AMT,0)	-- 미확정 인건비 값이 0인 의미없는 값 제외
		+ IFNULL(PRJ_LABOR_M2_AMT,0)
		+ IFNULL(PRJ_LABOR_M3_AMT,0)
		+ IFNULL(PRJ_LABOR_M4_AMT,0)
		+ IFNULL(PRJ_LABOR_M5_AMT,0)
		+ IFNULL(PRJ_LABOR_M6_AMT,0)
		+ IFNULL(PRJ_LABOR_M7_AMT,0)
		+ IFNULL(PRJ_LABOR_M8_AMT,0)
		+ IFNULL(PRJ_LABOR_M9_AMT,0)
		+ IFNULL(PRJ_LABOR_M10_AMT,0)
		+ IFNULL(PRJ_LABOR_M11_AMT,0)
		+ IFNULL(PRJ_LABOR_M12_AMT,0) > 0
	)
	SELECT
		:V_START_TIME,
		:V_USER_NAME,
		:V_START_TIME,
		:V_USER_NAME,
		VER,
		YEAR,
		MONTH,
		CCORG_CD,
		BIZ_OPP_NO,
		PRJ_NO_SFDC,
		PRJ_TP_CD,
		PRJ_TP_NM,
		PRFM_STR_DT,
		PRFM_END_DT,
		RECEIVED_ORDER_AMT,
		SALES_AMT,
		MARGIN_RATE,
		OPP_M1_AMT,
		OPP_M2_AMT,
		OPP_M3_AMT,
		OPP_M4_AMT,
		OPP_M5_AMT,
		OPP_M6_AMT,
		OPP_M7_AMT,
		OPP_M8_AMT,
		OPP_M9_AMT,
		OPP_M10_AMT,
		OPP_M11_AMT,
		OPP_M12_AMT
	FROM IF_DATA;
	
	V_INSERT_CNT = ::ROWCOUNT;
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK] STEP-2 [PASS]-['||:V_IF_TABLE||' INSERT COUNT =>'||:V_INSERT_CNT||']'));

	INSERT INTO COMMON_INTERFACE_LOG
	(VER, UUID, CREATEDAT, IF_STEP, SOURCE, TABLE_NAME, PROCEDURE_NAME, EXECUTE_TIME, ROW_COUNT, SUCCESS_YN, ERR_CD, LOG)
	VALUES
	(:VER, SYSUUID, CURRENT_TIMESTAMP, 'TRSF', 'PL_IF_SFDC', :V_IF_TABLE, ::CURRENT_OBJECT_NAME, ROUND(SECONDS_BETWEEN(CURRENT_TIMESTAMP, :V_START_TIME) * 1000,0), :V_INSERT_CNT, true, null, null);	

	UPDATE PL_IF_SFDC
	SET FLAG = 'S'
	WHERE FLAG IS NULL
	AND VER = :VER;

	-- [STEP-3] I/F DATA 등록 처리결과
	:O_RESULT.INSERT(('OK', :VER, NULL, '[OK]-PROCEDURE SUCCESS... COUNT => ['||:V_INSERT_CNT||']'));
				
END;