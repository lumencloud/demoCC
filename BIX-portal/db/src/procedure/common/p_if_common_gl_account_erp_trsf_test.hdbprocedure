/**
* PROJCOMMON_GL_ACCOUNTECT 정보 I/F TABLE -> BIX TABLE TRANSFER
*/
PROCEDURE P_IF_COMMON_GL_ACCOUNT_ERP_TRSF_TEST (
					IN VER_NO VARCHAR(20), 
					OUT O_RESULT TABLE (
						  RESULT_CODE NVARCHAR(30)
						, RESULT_VER NVARCHAR(20)
						, RESULT_MESSAGE_CODE NVARCHAR(50)
						, RESULT_MESSAGE_PARAMS NVARCHAR(300)
						, ERROR_TYPE NVARCHAR(30)
						, SQL_ERROR_CODE NVARCHAR(30)
						, SQL_ERROR_MESSAGE NVARCHAR(300)
					)
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
AS
BEGIN
USING SQLSCRIPT_PRINT AS LIB;
	
	DECLARE V_CREATE_DATETIME TIMESTAMP = CURRENT_TIMESTAMP;
	DECLARE V_SYS_NAME NVARCHAR(10) = 'IF_SYS';
	DECLARE V_VER NVARCHAR(20) = VER_NO; /** 버전 정보 파라미터로 받음**/

	DECLARE V_PROC_ID NVARCHAR(50) := 'P_IF_COMMON_GL_ACCOUNT_ERP_TRSF_TEST';
	DECLARE V_ERROR_TYPE NVARCHAR(30);

	DECLARE V_INSERT_CNT INTEGER := 0;

	/***********************************************
	예외 처리
	***********************************************/
	DECLARE V_ERR_USER_ERRCD 	CONDITION FOR SQL_ERROR_CODE 19999;	-- 사용자 정의  ERROR코드
	DECLARE V_ERR_VALID 		CONDITION FOR SQL_ERROR_CODE 10000;	-- INPUT PARAM ERROR
	DECLARE V_ERR_INSERT 		CONDITION FOR SQL_ERROR_CODE 10100;	-- INSERT CONDITION ERROR
	DECLARE V_ERR_DELETE 		CONDITION FOR SQL_ERROR_CODE 10200;	-- DELETE CONDITION ERROR
	DECLARE V_ERR_UPDATE 		CONDITION FOR SQL_ERROR_CODE 10300;	-- UPDATE CONDITION ERROR

	/* SQL ERROR 처리 */
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		-- PROCEDURE처리중 ERROR발생시 ERROR건 또는 전체건을 ROLLBACK처리할 것인지 재확인
		ROLLBACK;
		----------------VALIDATION 오류----------------
		IF ::SQL_ERROR_CODE = 10000 THEN
		  V_ERROR_TYPE = 'ERR_VALID';
		----------------INSERT 오류----------------
		ELSEIF ::SQL_ERROR_CODE = 10100 THEN
		  V_ERROR_TYPE = 'ERR_INS';
		----------------삭제처리 오류----------------
		ELSEIF ::SQL_ERROR_CODE = 10200 THEN
		  V_ERROR_TYPE = 'ERR_DEL';
		---------------- UPDATE 오류----------------
		 ELSEIF ::SQL_ERROR_CODE = 10300 THEN
		  V_ERROR_TYPE = 'ERR_UPD';
		----------------ANONYMOUS 오류----------------
		ELSE
		  V_ERROR_TYPE = 'ERR_UNKNOWN';
		END IF;

		-- IF 테이블 FLAG 'E' 처리
		UPDATE COMMON_IF_GL_ACCOUNT_TEST
		SET FLAG = 'E'
		WHERE FLAG IS NULL
		AND VER = :V_VER;

		:O_RESULT.INSERT(('NG', :V_VER, 'ERROR_MSG_CODE', NULL, V_ERROR_TYPE, ::SQL_ERROR_CODE, SUBSTR(::SQL_ERROR_MESSAGE,0,300)));

	END;

	/***********************************************
	VALIDATION
	***********************************************/


	:O_RESULT.INSERT(('OK', :V_VER, :V_PROC_ID, NULL, 'SUCCESS', NULL, '[OK]-STEP [PROCEDURE START]'));

	-- [STEP-1] I/F 테이블 확인 (FLAG IS NULL 인 데이터 체크)
	V_SRC_TBL =
		SELECT DISTINCT 1
		FROM COMMON_IF_GL_ACCOUNT_TEST
		WHERE FLAG IS NULL
		AND VER = :V_VER;
	

	IF (NOT IS_EMPTY(:V_SRC_TBL)) THEN
		
		-- [STEP-2] PROJECT 정보 IF DATA 등록
		INSERT INTO COMMON_GL_ACCOUNT_TEST (
			-- 인터페이스 > 본테이블 이관 공통컬럼
			CREATEDAT,
			CREATEDBY,
			MODIFIEDAT,
			MODIFIEDBY,
			VER,
			-- 테이블 데이터 컬럼
			GL_ACCOUNT, COMMITMENT_ITEM, NAME
		)
		WITH IF_DATA AS (
			SELECT
				VER,
				GL_ACCOUNT, COMMITMENT_ITEM, DESCRIPTION AS NAME 
			FROM COMMON_IF_GL_ACCOUNT_TEST
			WHERE FLAG IS NULL
			AND VER = :V_VER
		)
	    SELECT
			-- 인터페이스 > 본테이블 이관 공통컬럼
			:V_CREATE_DATETIME,
			:V_SYS_NAME,
			:V_CREATE_DATETIME,
			:V_SYS_NAME,
			VER,
			-- 테이블 데이터 컬럼
			GL_ACCOUNT, COMMITMENT_ITEM, NAME
	    FROM IF_DATA;
		
		V_INSERT_CNT = ::ROWCOUNT;
		:O_RESULT.INSERT(('OK', :V_VER, :V_PROC_ID, NULL, 'SUCCESS', NULL, '[OK] STEP-2 [PASS]-[COMMON_GL_ACCOUNT INSERT COUNT =>'||:V_INSERT_CNT||']'));

		UPDATE COMMON_IF_GL_ACCOUNT_TEST
		SET FLAG = 'S'
		WHERE FLAG IS NULL
		AND VER = :V_VER;

	ELSE
		V_INSERT_CNT = 0;
        :O_RESULT.INSERT(('OK', :V_VER, :V_PROC_ID, NULL, 'SUCCESS', NULL, '[I/F NO RESULT DATA PROC =>'||:V_INSERT_CNT||']'));
	END IF;

	-- [STEP-3] I/F DATA 등록 처리결과 등록
	:O_RESULT.DELETE();
	:O_RESULT.INSERT(('OK', :V_VER, :V_PROC_ID, NULL, 'FINISH', NULL, '[OK]-PROCEDURE SUCCESS... COUNT => ['||:V_INSERT_CNT||']'));

END;